/**
 * Class to help with Sha1 scheme.
 * TypeScript conversion from https://github.com/emn178/js-sha1.
 * Although this algorithm should not be use in most cases, it is the
 * default and most widely support for generating TOTP/HOTP codes.
 */
export declare class Sha1 {
    /**
     * Extra constants.
     * @internal
     */
    private static readonly _EXTRA;
    /**
     * Shift constants.
     * @internal
     */
    private static readonly _SHIFT;
    /**
     * Blocks.
     * @internal
     */
    private readonly blocks;
    /**
     * H0.
     * @internal
     */
    private h0;
    /**
     * H1.
     * @internal
     */
    private h1;
    /**
     * H2.
     * @internal
     */
    private h2;
    /**
     * H3.
     * @internal
     */
    private h3;
    /**
     * H4.
     * @internal
     */
    private h4;
    /**
     * Block.
     * @internal
     */
    private block;
    /**
     * Start.
     * @internal
     */
    private start;
    /**
     * Bytes.
     * @internal
     */
    private bytes;
    /**
     * h Bytes.
     * @internal
     */
    private hBytes;
    /**
     * Last byte index.
     * @internal
     */
    private lastByteIndex;
    /**
     * Is it finalized.
     * @internal
     */
    private finalized;
    /**
     * Is it hashed.
     * @internal
     */
    private hashed;
    /**
     * Is this the first pass.
     * @internal
     */
    private readonly first;
    /**
     * Create a new instance of Sha1.
     */
    constructor();
    /**
     * Perform Sum on the data.
     * @param data The data to operate on.
     * @returns The sum of the data.
     */
    static sum(data: Uint8Array): Uint8Array;
    /**
     * Update the hash with the data.
     * @param message The data to update the hash with.
     * @returns The instance for chaining.
     * @throws Error if the hash has already been finalized.
     */
    update(message: Uint8Array): Sha1;
    /**
     * Get the digest.
     * @returns The digest.
     */
    digest(): Uint8Array;
    /**
     * Finalize the hash.
     * @internal
     */
    private finalize;
    /**
     * Perform the hash.
     * @internal
     */
    private hash;
}
