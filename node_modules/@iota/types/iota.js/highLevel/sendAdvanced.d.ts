import type { BigInteger } from "../../big-int";
import { IBlock } from "../models/IBlock";
import type { IClient } from "../models/IClient";
import type { IKeyPair } from "../models/IKeyPair";
import type { IUTXOInput } from "../models/inputs/IUTXOInput";
import type { OutputTypes } from "../models/outputs/outputTypes";
import { ITransactionPayload } from "../models/payloads/ITransactionPayload";
/**
 * Send a transfer from the balance on the seed.
 * @param client The client or node endpoint to send the transfer with.
 * @param inputsAndSignatureKeyPairs The inputs with the signature key pairs needed to sign transfers.
 * @param outputs The outputs to send.
 * @param taggedData Optional tagged data to associate with the transaction.
 * @param taggedData.tag Optional tag.
 * @param taggedData.data Optional data.
 * @param powInterval The time in seconds that pow should work before aborting.
 * @param maxPowAttempts The number of times the pow should be attempted.
 * @returns The id of the block created and the remainder address if one was needed.
 */
export declare function sendAdvanced(client: IClient | string, inputsAndSignatureKeyPairs: {
    input: IUTXOInput;
    addressKeyPair: IKeyPair;
    consumingOutput: OutputTypes;
}[], outputs: {
    address: string;
    addressType: number;
    amount: BigInteger;
}[], taggedData?: {
    tag?: Uint8Array | string;
    data?: Uint8Array | string;
}, powInterval?: number, maxPowAttempts?: number): Promise<{
    blockId: string;
    block: IBlock;
}>;
/**
 * Build a transaction payload.
 * @param networkId The network id we are sending the payload on.
 * @param inputsAndSignatureKeyPairs The inputs with the signature key pairs needed to sign transfers.
 * @param outputs The outputs to send.
 * @param taggedData Optional tagged data to associate with the transaction.
 * @param taggedData.tag Optional tag.
 * @param taggedData.data Optional index data.
 * @returns The transaction payload.
 */
export declare function buildTransactionPayload(networkId: string, inputsAndSignatureKeyPairs: {
    input: IUTXOInput;
    addressKeyPair: IKeyPair;
    consumingOutput: OutputTypes;
}[], outputs: {
    address: string;
    addressType: number;
    amount: BigInteger;
}[], taggedData?: {
    tag?: Uint8Array | string;
    data?: Uint8Array | string;
}): ITransactionPayload;
