import { BigInteger } from "../../big-int";
import type { IBlock } from "../models/IBlock";
import type { IClient } from "../models/IClient";
import type { IKeyPair } from "../models/IKeyPair";
import { IUTXOInput } from "../models/inputs/IUTXOInput";
import type { ISeed } from "../models/ISeed";
import type { OutputTypes } from "../models/outputs/outputTypes";
/**
 * Send a transfer from the balance on the seed to a single output.
 * @param client The client or node endpoint to send the transfer with.
 * @param seed The seed to use for address generation.
 * @param accountIndex The account index in the wallet.
 * @param addressBech32 The address to send the funds to in bech32 format.
 * @param amount The amount to send.
 * @param taggedData Optional tagged data to associate with the transaction.
 * @param taggedData.tag Optional tag.
 * @param taggedData.data Optional data.
 * @param addressOptions Optional address configuration for balance address lookups.
 * @param addressOptions.startIndex The start index for the wallet count address, defaults to 0.
 * @param addressOptions.zeroCount The number of addresses with 0 balance during lookup before aborting.
 * @returns The id of the block created and the contructed block.
 */
export declare function send(client: IClient | string, seed: ISeed, accountIndex: number, addressBech32: string, amount: BigInteger, taggedData?: {
    tag?: Uint8Array | string;
    data?: Uint8Array | string;
}, addressOptions?: {
    startIndex?: number;
    zeroCount?: number;
}): Promise<{
    blockId: string;
    block: IBlock;
}>;
/**
 * Send a transfer from the balance on the seed to a single output.
 * @param client The client or node endpoint to send the transfer with.
 * @param seed The seed to use for address generation.
 * @param accountIndex The account index in the wallet.
 * @param addressEd25519 The address to send the funds to in ed25519 format.
 * @param amount The amount to send.
 * @param taggedData Optional tagged data to associate with the transaction.
 * @param taggedData.tag Optional tag.
 * @param taggedData.data Optional data.
 * @param addressOptions Optional address configuration for balance address lookups.
 * @param addressOptions.startIndex The start index for the wallet count address, defaults to 0.
 * @param addressOptions.zeroCount The number of addresses with 0 balance during lookup before aborting.
 * @returns The id of the block created and the contructed block.
 */
export declare function sendEd25519(client: IClient | string, seed: ISeed, accountIndex: number, addressEd25519: string, amount: BigInteger, taggedData?: {
    tag?: Uint8Array;
    data?: Uint8Array;
}, addressOptions?: {
    startIndex?: number;
    zeroCount?: number;
}): Promise<{
    blockId: string;
    block: IBlock;
}>;
/**
 * Send a transfer from the balance on the seed to multiple outputs.
 * @param client The client or node endpoint to send the transfer with.
 * @param seed The seed to use for address generation.
 * @param accountIndex The account index in the wallet.
 * @param outputs The address to send the funds to in bech32 format and amounts.
 * @param taggedData Optional tagged data to associate with the transaction.
 * @param taggedData.tag Optional tag.
 * @param taggedData.data Optional data.
 * @param addressOptions Optional address configuration for balance address lookups.
 * @param addressOptions.startIndex The start index for the wallet count address, defaults to 0.
 * @param addressOptions.zeroCount The number of addresses with 0 balance during lookup before aborting.
 * @returns The id of the block created and the contructed block.
 */
export declare function sendMultiple(client: IClient | string, seed: ISeed, accountIndex: number, outputs: {
    addressBech32: string;
    amount: BigInteger;
}[], taggedData?: {
    tag?: Uint8Array | string;
    data?: Uint8Array | string;
}, addressOptions?: {
    startIndex?: number;
    zeroCount?: number;
}): Promise<{
    blockId: string;
    block: IBlock;
}>;
/**
 * Send a transfer from the balance on the seed.
 * @param client The client or node endpoint to send the transfer with.
 * @param seed The seed to use for address generation.
 * @param accountIndex The account index in the wallet.
 * @param outputs The outputs including address to send the funds to in ed25519 format and amount.
 * @param taggedData Optional tagged data to associate with the transaction.
 * @param taggedData.tag Optional tag.
 * @param taggedData.data Optional data.
 * @param addressOptions Optional address configuration for balance address lookups.
 * @param addressOptions.startIndex The start index for the wallet count address, defaults to 0.
 * @param addressOptions.zeroCount The number of addresses with 0 balance during lookup before aborting.
 * @returns The id of the block created and the contructed block.
 */
export declare function sendMultipleEd25519(client: IClient | string, seed: ISeed, accountIndex: number, outputs: {
    addressEd25519: string;
    amount: BigInteger;
}[], taggedData?: {
    tag?: Uint8Array;
    data?: Uint8Array;
}, addressOptions?: {
    startIndex?: number;
    zeroCount?: number;
}): Promise<{
    blockId: string;
    block: IBlock;
}>;
/**
 * Send a transfer using account based indexing for the inputs.
 * @param client The client or node endpoint to send the transfer with.
 * @param seed The seed to use for address generation.
 * @param initialAddressState The initial address state for calculating the addresses.
 * @param nextAddressPath Calculate the next address for inputs.
 * @param outputs The address to send the funds to in bech32 format and amounts.
 * @param taggedData Optional tagged data to associate with the transaction.
 * @param taggedData.tag Optional tag.
 * @param taggedData.data Optional data.
 * @param powInterval The time in seconds that pow should work before aborting.
 * @param maxPowAttempts The number of times the pow should be attempted.
 * @param zeroCount The number of addresses with 0 balance during lookup before aborting.
 * @returns The id of the block created and the contructed block.
 */
export declare function sendWithAddressGenerator<T>(client: IClient | string, seed: ISeed, initialAddressState: T, nextAddressPath: (addressState: T) => string, outputs: {
    address: string;
    addressType: number;
    amount: BigInteger;
}[], taggedData?: {
    tag?: Uint8Array | string;
    data?: Uint8Array | string;
}, powInterval?: number, maxPowAttempts?: number, zeroCount?: number): Promise<{
    blockId: string;
    block: IBlock;
}>;
/**
 * Calculate the inputs from the seed and basePath.
 * @param client The client or node endpoint to calculate the inputs with.
 * @param seed The seed to use for address generation.
 * @param initialAddressState The initial address state for calculating the addresses.
 * @param nextAddressPath Calculate the next address for inputs.
 * @param outputs The outputs to send.
 * @param zeroCount Abort when the number of zero balances is exceeded.
 * @returns The id of the block created and the contructed block.
 */
export declare function calculateInputs<T>(client: IClient | string, seed: ISeed, initialAddressState: T, nextAddressPath: (addressState: T) => string, outputs: {
    address: string;
    addressType: number;
    amount: BigInteger;
}[], zeroCount?: number): Promise<{
    input: IUTXOInput;
    addressKeyPair: IKeyPair;
    consumingOutput: OutputTypes;
}[]>;
