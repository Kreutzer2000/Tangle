import type { AddressTypes } from "../models/addresses/addressTypes";
import type { ITipsResponse } from "../models/api/ITipsResponse";
import type { FeatureTypes } from "../models/features/featureTypes";
import type { IBlock } from "../models/IBlock";
import type { IBlockMetadata } from "../models/IBlockMetadata";
import type { IMigratedFunds } from "../models/IMigratedFunds";
import type { INativeToken } from "../models/INativeToken";
import type { INodeInfo } from "../models/info/INodeInfo";
import type { IRoutesResponse } from "../models/info/IRoutesResponse";
import type { InputTypes } from "../models/inputs/inputTypes";
import { IProtocolParamsMilestoneOption } from "../models/milestoneOptions/IProtocolParamsMilestoneOption";
import { IReceiptMilestoneOption } from "../models/milestoneOptions/IReceiptMilestoneOption";
import type { MilestoneOptionTypes } from "../models/milestoneOptions/milestoneOptionTypes";
import type { OutputTypes } from "../models/outputs/outputTypes";
import { IMilestonePayload } from "../models/payloads/IMilestonePayload";
import type { ITaggedDataPayload } from "../models/payloads/ITaggedDataPayload";
import { ITransactionPayload } from "../models/payloads/ITransactionPayload";
import { ITreasuryTransactionPayload } from "../models/payloads/ITreasuryTransactionPayload";
import type { PayloadTypes } from "../models/payloads/payloadTypes";
import type { SignatureTypes } from "../models/signatures/signatureTypes";
import type { TokenSchemeTypes } from "../models/tokenSchemes/tokenSchemeTypes";
import type { UnlockConditionTypes } from "../models/unlockConditions/unlockConditionTypes";
import type { UnlockTypes } from "../models/unlocks/unlockTypes";
/**
 * Set the logger for output.
 * @param log The logger.
 */
export declare function setLogger(log: (message: string, data?: unknown) => void): void;
/**
 * Log the routes of the node.
 * @param prefix The prefix for the output.
 * @param routes The available routes.
 */
export declare function logRoutes(prefix: string, routes: IRoutesResponse): void;
/**
 * Log the node information.
 * @param prefix The prefix for the output.
 * @param info The info to log.
 */
export declare function logInfo(prefix: string, info: INodeInfo): void;
/**
 * Log the tips information.
 * @param prefix The prefix for the output.
 * @param tipsResponse The tips to log.
 */
export declare function logTips(prefix: string, tipsResponse: ITipsResponse): void;
/**
 * Log a block to the console.
 * @param prefix The prefix for the output.
 * @param block The block to log.
 */
export declare function logBlock(prefix: string, block: IBlock): void;
/**
 * Log the block metadata to the console.
 * @param prefix The prefix for the output.
 * @param blockMetadata The blockMetadata to log.
 */
export declare function logBlockMetadata(prefix: string, blockMetadata: IBlockMetadata): void;
/**
 * Log a block to the console.
 * @param prefix The prefix for the output.
 * @param payload The payload.
 */
export declare function logPayload(prefix: string, payload?: PayloadTypes): void;
/**
 * Log a transaction payload to the console.
 * @param prefix The prefix for the output.
 * @param payload The payload.
 */
export declare function logTransactionPayload(prefix: string, payload?: ITransactionPayload): void;
/**
 * Log a tagged data payload to the console.
 * @param prefix The prefix for the output.
 * @param payload The payload.
 */
export declare function logTaggedDataPayload(prefix: string, payload?: ITaggedDataPayload): void;
/**
 * Log a milestone payload to the console.
 * @param prefix The prefix for the output.
 * @param payload The payload.
 */
export declare function logMilestonePayload(prefix: string, payload?: IMilestonePayload): void;
/**
 * Log milestone options to the console.
 * @param prefix The prefix for the output.
 * @param milestoneOptions The milestone options.
 */
export declare function logMilestoneOptions(prefix: string, milestoneOptions?: MilestoneOptionTypes[]): void;
/**
 * Log milestone option to the console.
 * @param prefix The prefix for the output.
 * @param milestoneOption The milestone option.
 */
export declare function logMilestoneOption(prefix: string, milestoneOption: MilestoneOptionTypes): void;
/**
 * Log a receipt milestone option to the console.
 * @param prefix The prefix for the output.
 * @param option The option.
 */
export declare function logReceiptMilestoneOption(prefix: string, option?: IReceiptMilestoneOption): void;
/**
 * Log a protocol params milestone option to the console.
 * @param prefix The prefix for the output.
 * @param option The option.
 */
export declare function logProtocolParamsMilestoneOption(prefix: string, option?: IProtocolParamsMilestoneOption): void;
/**
 * Log a treasury transaction payload to the console.
 * @param prefix The prefix for the output.
 * @param payload The payload.
 */
export declare function logTreasuryTransactionPayload(prefix: string, payload?: ITreasuryTransactionPayload): void;
/**
 * Log an address to the console.
 * @param prefix The prefix for the output.
 * @param address The address to log.
 */
export declare function logAddress(prefix: string, address?: AddressTypes): void;
/**
 * Log signature to the console.
 * @param prefix The prefix for the output.
 * @param signature The signature to log.
 */
export declare function logSignature(prefix: string, signature?: SignatureTypes): void;
/**
 * Log input to the console.
 * @param prefix The prefix for the output.
 * @param input The input to log.
 */
export declare function logInput(prefix: string, input?: InputTypes): void;
/**
 * Log output to the console.
 * @param prefix The prefix for the output.
 * @param output The output to log.
 */
export declare function logOutput(prefix: string, output?: OutputTypes): void;
/**
 * Log unlock to the console.
 * @param prefix The prefix for the output.
 * @param unlock The unlock to log.
 */
export declare function logUnlock(prefix: string, unlock?: UnlockTypes): void;
/**
 * Log fund to the console.
 * @param prefix The prefix for the output.
 * @param fund The fund to log.
 */
export declare function logFunds(prefix: string, fund?: IMigratedFunds): void;
/**
 * Log native tokens to the console.
 * @param prefix The prefix for the output.
 * @param nativeTokens The native tokens.
 */
export declare function logNativeTokens(prefix: string, nativeTokens: INativeToken[] | undefined): void;
/**
 * Log token scheme to the console.
 * @param prefix The prefix for the output.
 * @param tokenScheme The token scheme.
 */
export declare function logTokenScheme(prefix: string, tokenScheme: TokenSchemeTypes): void;
/**
 * Log featurew to the console.
 * @param prefix The prefix for the output.
 * @param features The features.
 */
export declare function logFeatures(prefix: string, features: FeatureTypes[] | undefined): void;
/**
 * Log immutable featuress to the console.
 * @param prefix The prefix for the output.
 * @param immutableFeatures The features.
 */
export declare function logImmutableFeatures(prefix: string, immutableFeatures: FeatureTypes[] | undefined): void;
/**
 * Log feature to the console.
 * @param prefix The prefix for the output.
 * @param feature The feature.
 */
export declare function logFeature(prefix: string, feature: FeatureTypes): void;
/**
 * Log unlock conditions to the console.
 * @param prefix The prefix for the output.
 * @param unlockConditions The unlock conditions.
 */
export declare function logUnlockConditions(prefix: string, unlockConditions: UnlockConditionTypes[]): void;
/**
 * Log feature block to the console.
 * @param prefix The prefix for the output.
 * @param unlockCondition The unlock condition.
 */
export declare function logUnlockCondition(prefix: string, unlockCondition: UnlockConditionTypes): void;
