/** @module bundle-validator */
import { INVALID_BUNDLE } from '../../errors';
import { Validator } from '../../guards';
import { Bundle, Transaction } from '../../types';
export { Transaction, Bundle, INVALID_BUNDLE };
/**
 *
 * This method takes an array of transaction trytes and checks if the signatures are valid.
 *
 * ## Related methods
 *
 * To get a bundle's transaction trytes from the Tangle, use the [`getBundle()`]{@link #module_core.getBundle} method.
 *
 * @method validateBundleSignatures
 *
 * @summary Validates the signatures in a given bundle
 *
 * @memberof module:bundle-validator
 *
 * @param {Transaction[]} bundle - Transaction trytes
 *
 * @example
 * ```js
 * let valid = Validator.validateBundleSignatures(bundle);
 * ```
 *
 * @return {boolean} Whether the signatures are valid
 *
 */
export declare const validateBundleSignatures: (bundle: readonly Transaction[]) => boolean;
/**
 * This method takes an array of transaction trytes and validates whether they form a valid bundle by checking the following:
 *
 * - Addresses in value transactions have a 0 trit at the end, which means they were generated using the Kerl hashing function
 * - Transactions in the bundle array are in the same order as their `currentIndex` field
 * - The total value of all transactions in the bundle sums to 0
 * - The bundle hash is valid
 *
 * ## Related methods
 *
 * To get a bundle's transaction trytes from the Tangle, use the [`getBundle()`]{@link #module_core.getBundle} method.
 *
 * @method isBundle
 *
 * @summary Validates the structure and contents of a given bundle.
 *
 * @memberof module:bundle-validator
 *
 * @param {Transaction[]} bundle - Transaction trytes
 *
 * @example
 * ```js
 * let bundle = Validator.isBundle(bundle);
 * ```
 *
 * @return {boolean} bundle - Whether the bundle is valid
 *
 */
export default function isBundle(bundle: Bundle): boolean;
export declare const bundleValidator: Validator<Bundle>;
