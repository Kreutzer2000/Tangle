import type { WalletEventType } from './types/wallet';
import { Event } from './types/wallet';
import type { WalletMethodHandler } from './wallet/wallet-method-handler';
import { __UtilsMethods__ } from './types/utils';
import type { SecretManagerMethodHandler } from './secret_manager/secret-manager-method-handler';
import type { ClientMethodHandler } from './client/client-method-handler';
declare const createSecretManager: any, initLogger: any, createClient: any, destroyClient: any, listenMqtt: any, createWallet: any, destroyWallet: any, getClientFromWallet: any, getSecretManagerFromWallet: any, migrateStrongholdSnapshotV2ToV3: any, migrateDbChrysalisToStardust: any;
declare const callClientMethodAsync: (method: string, handler: ClientMethodHandler) => Promise<string>;
declare const callSecretManagerMethodAsync: (method: string, handler: SecretManagerMethodHandler) => Promise<string>;
declare const callUtilsMethod: (method: __UtilsMethods__) => any;
declare const listenWalletAsync: (eventTypes: WalletEventType[], callback: (error: Error, event: Event) => void, handler: WalletMethodHandler) => Promise<void>;
declare const callWalletMethodAsync: (method: string, handler: WalletMethodHandler) => Promise<string>;
export { initLogger, createClient, destroyClient, createSecretManager, createWallet, callClientMethodAsync, callSecretManagerMethodAsync, callUtilsMethod, callWalletMethodAsync, destroyWallet, listenWalletAsync, getClientFromWallet, getSecretManagerFromWallet, listenMqtt, migrateStrongholdSnapshotV2ToV3, migrateDbChrysalisToStardust, };
//# sourceMappingURL=bindings.d.ts.map