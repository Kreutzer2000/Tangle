import * as Promise from 'bluebird';
import { Address, Callback, NativeGenerateSignatureFunction, Provider, // tslint:disable-line no-unused-variable
Transfer, Trytes } from '../../types';
export interface PrepareTransfersOptions {
    readonly inputs: ReadonlyArray<Address>;
    readonly address?: Trytes;
    readonly remainderAddress?: Trytes;
    readonly security: number;
    readonly hmacKey?: Trytes;
    readonly nativeGenerateSignatureFunction?: NativeGenerateSignatureFunction;
}
export declare const getPrepareTransfersOptions: (options: Partial<PrepareTransfersOptions>) => {
    remainderAddress: string | undefined;
    inputs: readonly Address[];
    address?: string | undefined;
    security: number;
    hmacKey?: string | undefined;
    nativeGenerateSignatureFunction?: NativeGenerateSignatureFunction | undefined;
};
export interface PrepareTransfersProps {
    readonly transactions: Int8Array;
    readonly trytes: ReadonlyArray<Trytes>;
    readonly transfers: ReadonlyArray<Transfer>;
    readonly seed: Int8Array;
    readonly security: number;
    readonly inputs: ReadonlyArray<Address>;
    readonly timestamp: number;
    readonly remainderAddress?: Trytes;
    readonly address?: Trytes;
    readonly hmacKey?: Trytes;
    readonly nativeGenerateSignatureFunction?: NativeGenerateSignatureFunction;
}
/**
 *
 * @method createPrepareTransfers
 *
 * @summary Creates a new `prepareTransfers()` method.
 *
 * @memberof module:core
 *
 * @param {Provider} [provider] - Optional provider object that the method should use to call the node's API endpoints.
 * To create transactions offline, omit this parameter so that the returned function does not get your addresses and balances from the node. To create value transactions offline, make sure to pass input objects and a remainder address to the returned function.
 *
 * @example
 * ```js
 * const prepareTransfers = Iota.createPrepareTransfers();
 *
 * const transfers = [
 *  {
 *    value: 1,
 *    address: 'RECEIVINGADDRESS...'
 *  }
 * ];
 *
 * prepareTransfers(seed, transfers, {
 *  inputs:[{address: 'ADDRESS...',
 *  keyIndex: 5,
 *  security: 2,
 *  balance: 50}],
 *  // Remainder will be 50 -1 = 49 IOTA tokens
 *  address: 'REMAINDERADDRESS...'
 * })
 * .then(bundleTrytes => {
 *  console.log('Bundle trytes are ready to be attached to the Tangle:');
 *  console.log(JSON.stringify(bundleTrytes));
 * })
 * .catch(error => {
 *  console.log(`Something went wrong: ${error}`);
 * });
 * ```
 *
 * @return {Function} [`prepareTransfers`]{@link #module_core.prepareTransfers}  - A new `prepareTransfers()` function that uses your chosen Provider instance.
 */
export declare const createPrepareTransfers: (provider?: Provider | undefined, now?: () => number, caller?: string | undefined) => (seed: string | Int8Array, transfers: readonly Transfer[], options?: Partial<PrepareTransfersOptions>, callback?: Callback<readonly string[]> | undefined) => Promise<readonly string[]>;
export declare const validatePrepareTransfers: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const addHMACPlaceholder: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const addTransfers: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const createAddInputs: (provider?: Provider | undefined) => (props: PrepareTransfersProps) => Promise<PrepareTransfersProps>;
export declare const createAddRemainder: (provider?: Provider | undefined) => (props: PrepareTransfersProps) => PrepareTransfersProps | Promise<PrepareTransfersProps>;
export declare const getRemainderAddressStartIndex: (inputs: readonly Address[]) => number;
export declare const verifyNotSendingToInputs: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const finalize: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const addSignatures: (props: PrepareTransfersProps) => Promise<PrepareTransfersProps>;
export declare const addHMAC: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const asTransactionTrytes: (props: PrepareTransfersProps) => PrepareTransfersProps;
