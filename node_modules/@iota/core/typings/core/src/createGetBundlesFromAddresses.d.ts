import * as Promise from 'bluebird';
import { Callback, Hash, Provider, Transaction } from '../../types';
export declare const createGetBundlesFromAddresses: (provider: Provider, caller?: string | undefined) => (addresses: readonly string[], inclusionStates?: boolean | undefined, callback?: Callback<readonly (readonly Transaction[])[]> | undefined) => Promise<readonly (readonly Transaction[])[]>;
export declare const groupTransactionsIntoBundles: (transactions: readonly Transaction[]) => readonly (readonly Transaction[])[];
export declare const getBundleSync: (transactions: readonly Transaction[], transaction: Transaction, bundle?: readonly Transaction[]) => readonly Transaction[];
export declare const zip2: <A, B>(as: readonly A[], bs: readonly B[]) => [A, B][];
export declare const zipPersistence: (bundles: readonly (readonly Transaction[])[]) => (states: readonly boolean[]) => readonly (readonly Transaction[])[];
declare type GetInclusionStates = (transactions: ReadonlyArray<Hash>, callback?: Callback<ReadonlyArray<boolean>>) => Promise<ReadonlyArray<boolean>>;
export declare const addPersistence: (getInclusionStates: GetInclusionStates, bundles: readonly (readonly Transaction[])[]) => Promise<readonly (readonly Transaction[])[]>;
export declare const sortByTimestamp: (bundles: readonly (readonly Transaction[])[]) => (readonly Transaction[])[];
export {};
