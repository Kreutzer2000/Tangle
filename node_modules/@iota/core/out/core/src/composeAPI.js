"use strict";
exports.__esModule = true;
var http_client_1 = require("@iota/http-client");
var _1 = require("./");
var createGetBundlesFromAddresses_1 = require("./createGetBundlesFromAddresses");
var createGetTransfers_1 = require("./createGetTransfers");
function returnType(func) {
    return {}; // tslint:disable-line no-object-literal-type-assertion
}
exports.returnType = returnType;
/**
 * @method composeApi
 *
 * @summary Creates an API object that's used to send requests to an IRI node.
 *
 * @memberof module:core
 *
 * @param {Object} [settings={}] - Connection settings.
 * @param {Provider} [settings.network=http-client] - Network provider
 * @param {string} [settings.provider=http://localhost:14265] - URI of an IRI node
 * @param {Function} [settings.attachToTangle=attachToTangle] - Function that overrides the default `attachToTangle` endpoint
 * @param {string | number} [settings.apiVersion=1] - IOTA API version to use in the `X-IOTA-API-Version` HTTP header
 * @param {number} [settings.requestBatchSize=1000] - Maximum number of parameters that may be sent in batched API request for [`findTransactions`]{@link #module_core.findTransactions}, [`getBalances`]{@link #module_core.getBalances}, [`getInclusionStates`]{@link #module_core.getInclusionStates}, and [`getTrytes`]{@link #module_core.getTrytes}
 *
 * @example
 * ```js
 * const Iota = require('@iota/core`);
 *
 * const iota = Iota.composeAPI({
 *  provider: 'https://nodes.devnet.thetangle.org:443'
 * });
 * ```
 *
 * @return {API} iota - API object to use to interact with an IRI node.
 */
exports.composeAPI = function (settings) {
    if (settings === void 0) { settings = {}; }
    var provider = http_client_1.createHttpClient(settings);
    var attachToTangle = settings.attachToTangle || _1.createAttachToTangle(provider);
    /**
     * @method setSettings
     *
     * @summary Defines network provider configuration and [`attachToTangle`]{@link #module_core.attachToTangle} method.
     *
     * @memberof API
     *
     * @param {Object} settings - Provider settings object
     * @param {string} [settings.provider] - URI of an IRI node
     * @param {Provider} [settings.network] - Network provider
     * @param {Function} [settings.attachToTangle] - A new `attachToTangle()` function
     */
    function setSettings(newSettings) {
        if (newSettings === void 0) { newSettings = {}; }
        if (newSettings.attachToTangle) {
            attachToTangle = newSettings.attachToTangle;
        }
        if (newSettings.network) {
            provider = newSettings.network;
        }
        provider.setSettings(newSettings);
    }
    /**
     *
     * @method overrideNetwork
     *
     * @summary Overrides the default provider
     *
     * @memberof API
     *
     * @ignore
     *
     * @param {Provider} network - Provider instance to use to override the existing network settings
     */
    function overrideNetwork(network) {
        provider = network;
    }
    /**
     *
     * @method overrideAttachToTangle
     *
     * @summary Overrides the default [`attachToTangle`]{@link #module_core.attachToTangle} method
     *
     * @memberof API
     *
     * @ignore
     *
     * @param {function} attachToTangle - Function that overrides the
     * [`attachToTangle`]{@link #module_core.attachToTangle} method
     */
    function overrideAttachToTangle(attachFn) {
        attachToTangle = attachFn;
    }
    /** @namespace API */
    return {
        // IRI commands
        addNeighbors: _1.createAddNeighbors(provider),
        attachToTangle: attachToTangle,
        broadcastTransactions: _1.createBroadcastTransactions(provider),
        checkConsistency: _1.createCheckConsistency(provider),
        findTransactions: _1.createFindTransactions(provider),
        getBalances: _1.createGetBalances(provider),
        getInclusionStates: _1.createGetInclusionStates(provider),
        getNeighbors: _1.createGetNeighbors(provider),
        getNodeInfo: _1.createGetNodeInfo(provider),
        getTransactionsToApprove: _1.createGetTransactionsToApprove(provider),
        getTrytes: _1.createGetTrytes(provider),
        interruptAttachingToTangle: _1.createInterruptAttachingToTangle(provider),
        removeNeighbors: _1.createRemoveNeighbors(provider),
        storeTransactions: _1.createStoreTransactions(provider),
        wereAddressesSpentFrom: _1.createWereAddressesSpentFrom(provider),
        sendCommand: provider.send,
        // Wrapper methods
        broadcastBundle: _1.createBroadcastBundle(provider),
        getAccountData: _1.createGetAccountData(provider),
        getBundle: _1.createGetBundle(provider),
        getBundlesFromAddresses: createGetBundlesFromAddresses_1.createGetBundlesFromAddresses(provider),
        getNewAddress: _1.createGetNewAddress(provider),
        getTransactionObjects: _1.createGetTransactionObjects(provider),
        findTransactionObjects: _1.createFindTransactionObjects(provider),
        getInputs: _1.createGetInputs(provider),
        getTransfers: createGetTransfers_1.createGetTransfers(provider),
        isPromotable: _1.createIsPromotable(provider),
        isReattachable: _1.createIsReattachable(provider),
        prepareTransfers: _1.createPrepareTransfers(provider),
        promoteTransaction: _1.createPromoteTransaction(provider, attachToTangle),
        replayBundle: _1.createReplayBundle(provider, attachToTangle),
        // sendTransfer: createSendTransfer(provider, attachToTangle),
        sendTrytes: _1.createSendTrytes(provider, attachToTangle),
        storeAndBroadcast: _1.createStoreAndBroadcast(provider),
        traverseBundle: _1.createTraverseBundle(provider),
        setSettings: setSettings,
        overrideAttachToTangle: overrideAttachToTangle,
        overrideNetwork: overrideNetwork
    };
};
exports.apiType = returnType(exports.composeAPI);
//# sourceMappingURL=composeAPI.js.map