"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var Bluebird = require("bluebird");
var errors = require("../../errors");
var guards_1 = require("../../guards");
var _1 = require("./");
var createPrepareTransfers_1 = require("./createPrepareTransfers");
var createSendTransfer_1 = require("./createSendTransfer");
var defaults = {
    delay: 0,
    interrupt: false
};
exports.spam = {
    address: '9'.repeat(81),
    value: 0,
    tag: '9'.repeat(27),
    message: '9'.repeat(27 * 81)
};
exports.generateSpam = function (n) {
    if (n === void 0) { n = 1; }
    return new Array(n).fill(exports.spam);
};
/**
 * @method createPromoteTransaction
 *
 * @memberof module:core
 *
 * @ignore
 *
 * @param {Provider} provider - Network provider
 *
 * @param {Function} [attachFn] - Optional `attachToTangle` function to override the
 * [default method]{@link #module_core.attachToTangle}.
 *
 * @return {Function} {@link #module_core.promoteTransaction `promoteTransaction`}
 */
exports.createPromoteTransaction = function (provider, attachFn) {
    var checkConsistency = _1.createCheckConsistency(provider);
    var sendTransfer = createSendTransfer_1.createSendTransfer(provider, attachFn);
    /**
     * This method promotes only consistent transactions by checking them with the [`checkConsistency()`]{@link #module_core.checkConsistency} method.
     *
     * ## Related methods
     *
     * Use the [`isPromotable()`]{@link #module_core.isPromotable} method to check if a transaction can be [promoted](https://docs.iota.org/docs/getting-started/0.1/transactions/reattach-rebroadcast-promote).
     *
     * If a transaction can't be promoted, use the [`replayBundle()`]{@link #module_core.replayBundle} method to [reattach](https://docs.iota.org/docs/getting-started/0.1/transactions/reattach-rebroadcast-promote) it to the Tangle.
     *
     * @method promoteTransaction
     *
     * @summary [Promotes](https://docs.iota.org/docs/getting-started/0.1/transactions/reattach-rebroadcast-promote#promote) a given tail transaction.
     *
     * @memberof module:core
     *
     * @param {Hash} tail - Tail transaction hash
     *
     * @param {number} depth - The [depth](https://docs.iota.org/docs/getting-started/0.1/transactions/depth) at which to start the weighted random walk. The [Trinity wallet](https://trinity.iota.org/) uses a value of `3`,
     * meaning that the weighted random walk starts 3 milestones in the past.
     *
     * @param {number} minWeightMagnitude - [Minimum weight magnitude](https://docs.iota.org/docs/getting-started/0.1/network/minimum-weight-magnitude)
     *
     * @param {Array} [spamTransfers={address: '9999...999', value:0, tag:'999...999',message: '999...999' }] - Array of transfer objects to use to promote the transaction
     *
     * @param {Object} [options] - Options object
     *
     * @param {number} [options.delay] - Delay in milliseconds before sending each zero-value transaction
     *
     * @param {boolean|Function} [options.interrupt] - Either a boolean or a function that evaluates to a boolean to stop the method from sending transactions
     *
     * @param {Callback} [callback] - Optional callback function
     *
     * @example
     *
     * ```js
     * iota.promoteTransaction('FOSJBUZEHOBDKIOJ9RXBRPPZSJHWMXCDFJLIJSLJG9HRKEEJGAHWATEVCYERPQXDWFHQRGZOGIILZ9999',
     * 3,14)
     * .then(transactions => {
     *   console.log(`Promoted the tail transaction, using the following transactions: \n` +
     *   JSON.stringify(transactions));
     * })
     * .catch(error => {
     *     console.log(`Something went wrong: ${error}`);
     * })
     * ```
     *
     * @returns {Promise}
     *
     * @fulfil {Transaction[]} transactions - Array of zero-value transaction objects that were sent
     *
     * @reject {Error} error - An error that contains one of the following:
     * - `INCONSISTENT_SUBTANGLE`: In this case, promotion has no effect and a reattachment is required by calling the [`replayBundle()`]{@link #module_core.replayBundle} method
     * - Fetch error: The connected IOTA node's API returned an error. See the [list of error messages](https://docs.iota.org/docs/node-software/0.1/iri/references/api-errors)
     */
    return function promoteTransaction(tailTransaction, depth, minWeightMagnitude, spamTransfers, options, callback) {
        var _this = this;
        if (spamTransfers === void 0) { spamTransfers = exports.generateSpam(); }
        // Switch arguments
        if (!options) {
            options = __assign({}, defaults);
        }
        else if (typeof options === 'function') {
            callback = options;
            options = __assign({}, defaults);
        }
        var spamTransactions = [];
        var sendTransferOptions = __assign({}, createPrepareTransfers_1.getPrepareTransfersOptions({}), { reference: tailTransaction });
        var timeout = options.delay;
        var delay = function () { return new Promise(function (resolve) { return setTimeout(resolve, timeout); }); };
        var promote = function () {
            return delay()
                .then(function () { return checkConsistency(tailTransaction, { rejectWithReason: true }); })
                .then(function (consistent) {
                if (!consistent) {
                    throw new Error(errors.INCONSISTENT_SUBTANGLE);
                }
                return sendTransfer(spamTransfers[0].address, depth, minWeightMagnitude, spamTransfers, sendTransferOptions);
            })
                .then(function (transactions) { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            spamTransactions.push(transactions.slice());
                            if (!(options && timeout)) return [3 /*break*/, 4];
                            _a = options.interrupt === true;
                            if (_a) return [3 /*break*/, 3];
                            _b = typeof options.interrupt === 'function';
                            if (!_b) return [3 /*break*/, 2];
                            return [4 /*yield*/, options.interrupt()];
                        case 1:
                            _b = (_c.sent());
                            _c.label = 2;
                        case 2:
                            _a = (_b);
                            _c.label = 3;
                        case 3:
                            if (_a) {
                                return [2 /*return*/, spamTransactions.slice()];
                            }
                            return [2 /*return*/, promote()];
                        case 4: return [2 /*return*/, spamTransactions.slice()];
                    }
                });
            }); });
        };
        return Bluebird.resolve(guards_1.validate(guards_1.hashValidator(tailTransaction), [delay, function (n) { return typeof n === 'function' || (typeof n === 'number' && n >= 0); }, errors.INVALID_DELAY], !!spamTransfers && guards_1.arrayValidator(guards_1.transferValidator)(spamTransfers)))
            .then(promote)
            .asCallback(callback);
    };
};
//# sourceMappingURL=createPromoteTransaction.js.map