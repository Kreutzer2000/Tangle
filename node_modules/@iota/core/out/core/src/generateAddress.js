"use strict";
exports.__esModule = true;
var checksum_1 = require("@iota/checksum");
var converter_1 = require("@iota/converter");
var signing_1 = require("@iota/signing");
var guards_1 = require("../../guards");
/**
 * Generates an address, according to the given seed, index, and security level.
 *
 * **Note:** This method does not check if the address is [spent](https://docs.iota.org/docs/getting-started/0.1/clients/addresses#spent-addresses).
 *
 * ## Related methods
 *
 * To generate an address that has a lower probability of being spent, use the [`getNewAddress()`]{@link #module_core.getNewAddress} method.
 *
 * @method generateAddress
 *
 * @summary Generates an address with a specific index and security level.
 *
 * @memberof module:core
 *
 * @param {string} seed The seed to use to generate the address
 * @param {number} index - The key index to use to generate the address
 * @param {number} [security=2] - The [security level](https://docs.iota.org/docs/getting-started/0.1/clients/security-levels) to use to generate the address
 * @param {boolean} [checksum=false] - Whether to add the [checksum](https://docs.iota.org/docs/getting-started/0.1/clients/checksums)
 *
 * @example
 * ```js
 * const myAddress = generateAddress(seed, 0);
 * ```
 *
 * @returns {Hash} address - An 81-tryte address
 *
 * @throws {errors.INVALID_SEED}: Make sure that the seed contains only trytes
 *
 * @throws {errors.INVALID_SECURITY_LEVEL}: Make sure that the security level is a number between 1 and 3
 */
exports.generateAddress = function (seed, index, security, checksum) {
    if (security === void 0) { security = 2; }
    if (checksum === void 0) { checksum = false; }
    while (seed.length % 81 !== 0) {
        seed += 9;
    }
    guards_1.validate(guards_1.seedValidator(seed), guards_1.securityLevelValidator(security));
    var keyTrits = signing_1.key(signing_1.subseed(converter_1.trits(seed), index), security);
    var digestsTrits = signing_1.digests(keyTrits);
    var addressTrytes = converter_1.trytes(signing_1.address(digestsTrits));
    return checksum ? checksum_1.addChecksum(addressTrytes) : addressTrytes;
};
//# sourceMappingURL=generateAddress.js.map