"use strict";
exports.__esModule = true;
var converter_1 = require("@iota/converter");
var transaction_1 = require("@iota/transaction");
var Promise = require("bluebird");
var errors = require("../../errors");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
/**
 * @method createGetTrytes
 *
 * @summary Creates a new `getTrytes()` method, using a custom Provider instance.
 *
 * @memberof module:core
 *
 * @ignore
 *
 * @param {Provider} provider - The Provider object that the method should use to call the node's API endpoints.
 *
 * @return {Function} [`getTrytes`]{@link #module_core.getTrytes}  - A new `getTrytes()` function that uses your chosen Provider instance.
 */
exports.createGetTrytes = function (_a) {
    var send = _a.send;
    /**
     * This method uses the connected IRI node's
     * [`getTrytes`](https://docs.iota.org/docs/node-software/0.1/iri/references/api-reference#gettrytes) endpoint.
     *
     * The transaction trytes include all transaction fields except the transaction hash.
     *
     * **Note:** If the connected IRI node doesn't have the given transaction in its ledger, the value at the index of that transaction hash is either `null` or a string of `9`s.
     *
     * ## Related methods
     *
     * To get transaction objects instead of trytes, use the [`getTransactionObjects()`]{@link #module_core.getTransactionObjects} method.
     *
     * @method getTrytes
     *
     * @summary Gets the transaction trytes for the given transaction hashes.
     *
     * @memberof module:core
     *
     * @param {Array<Hash>} hashes - Array of transaction hashes
     * @param {Callback} [callback] - Optional callback function
     *
     * @example
     * ```js
     * getTrytes(hashes)
     *   .then(trytes => {
     *   .then(transactionTrytes => {
     *     console.log(Found the following transaction trytes:);
     *     console.log(JSON.stringify(transactionTrytes));
     *   })
     *   .catch(error => {
     *     console.log(`Something went wrong: ${error}`);
     *   });
     * ```
     *
     * @return {Promise}
     *
     * @fulfil {Trytes[]} transactionTrytes - Array of transaction trytes
     *
     * @reject Error{} error - An error that contains one of the following:
     * - `INVALID_TRANSACTION_HASH`: Make sure that the transaction hashes are 81 trytes long
     * - Fetch error: The connected IOTA node's API returned an error. See the [list of error messages](https://docs.iota.org/docs/node-software/0.1/iri/references/api-errors)
     */
    return function getTrytes(hashes, callback) {
        return Promise.resolve(guards_1.validate([
            hashes,
            function (arr) { return arr.every(function (h) { return guards_1.isTrytesOfExactLength(h, transaction_1.TRANSACTION_HASH_LENGTH / converter_1.TRYTE_WIDTH); }); },
            errors.INVALID_TRANSACTION_HASH,
        ]))
            .then(function () {
            return send({
                command: types_1.IRICommand.GET_TRYTES,
                hashes: hashes
            });
        })
            .then(function (_a) {
            var trytes = _a.trytes;
            return trytes;
        })
            .asCallback(callback);
    };
};
//# sourceMappingURL=createGetTrytes.js.map