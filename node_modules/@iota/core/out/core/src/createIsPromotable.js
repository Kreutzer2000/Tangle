"use strict";
exports.__esModule = true;
var transaction_converter_1 = require("@iota/transaction-converter");
var Promise = require("bluebird");
var guards_1 = require("../../guards");
var _1 = require("./");
var MILESTONE_INTERVAL = 2 * 60 * 1000;
var ONE_WAY_DELAY = 1 * 60 * 1000;
var DEPTH = 6;
exports.isAboveMaxDepth = function (attachmentTimestamp, depth) {
    if (depth === void 0) { depth = DEPTH; }
    return attachmentTimestamp < Date.now() && Date.now() - attachmentTimestamp < depth * MILESTONE_INTERVAL - ONE_WAY_DELAY;
};
/**
 *
 * @method createIsPromotable
 *
 * @memberof module:core
 *
 * @ignore
 *
 * @param {Provider} provider - Network provider
 *
 * @param {number} [depth=6] - Depth up to which promotion is effective.
 *
 * @return {function} {@link #module_core.isPromotable}
 */
exports.createIsPromotable = function (provider, depth) {
    if (depth === void 0) { depth = DEPTH; }
    var checkConsistency = _1.createCheckConsistency(provider);
    var getTrytes = _1.createGetTrytes(provider);
    /**
     * To decide if a transaction can be promoted, this method makes sure that it's [consistent]{@link #module_core.checkConsistency}
     * and that the value of the transaction's `attachmentTimestamp` field is not older than the latest 6 milestones.
     *
     * ## Related methods
     *
     * If a transaction is promotable, you can promote it by using the [`promoteTransaction()`]{@link #module_core.promoteTransaction} method.
     *
     * @method isPromotable
     *
     * @summary Checks if a given tail transaction hash can be [promoted](https://docs.iota.org/docs/getting-started/0.1/transactions/reattach-rebroadcast-promote#promote).
     *
     * @memberof module:core
     *
     * @param {Hash} tail - Tail transaction hash
     * @param {Callback} [callback] - Optional callback function
     *
     * @example
     * ```js
     * isPromotable(tailTransactionHash)
     *   .then(isPromotable => {
     *     isPromotable? console.log(`${tailTransactionHash} can be promoted`):
     *     console.log(`${tailTransactionHash} cannot be promoted. You may want to reattach it.`);
     *   })
     *   .catch(error => {
     *     console.log(`Something went wrong: ${error}`);
     *   })
     * ```
     *
     * @return {Promise}
     *
     * @fulfil {boolean} isPromotable - Returns `true` if the transaction is promotable or `false` if not.
     *
     * @reject {Error} error - An error that contains one of the following:
     * - `INVALID_TRANSACTION_HASH`: Make sure the tail transaction hashes are 81 trytes long and their `currentIndex` field is 0
     * - Fetch error: The connected IOTA node's API returned an error. See the [list of error messages](https://docs.iota.org/docs/node-software/0.1/iri/references/api-errors)
     */
    return function (tail, callback) {
        return Promise.resolve(guards_1.validate(guards_1.hashValidator(tail), guards_1.depthValidator(depth)))
            .then(function () {
            return Promise.all([
                checkConsistency(tail),
                getTrytes([tail]).then(function (_a) {
                    var trytes = _a[0];
                    return transaction_converter_1.asTransactionObject(trytes, tail).attachmentTimestamp;
                }),
            ]);
        })
            .then(function (_a) {
            var isConsistent = _a[0], attachmentTimestamp = _a[1];
            return isConsistent && exports.isAboveMaxDepth(attachmentTimestamp, depth);
        })
            .asCallback(callback);
    };
};
//# sourceMappingURL=createIsPromotable.js.map