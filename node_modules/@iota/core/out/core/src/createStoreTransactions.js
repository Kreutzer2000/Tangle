"use strict";
exports.__esModule = true;
var converter_1 = require("@iota/converter");
var transaction_1 = require("@iota/transaction");
var Promise = require("bluebird");
var errors = require("../../errors");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
/**
 * @method createStoreTransactions
 *
 * @memberof module:core
 *
 * @ignore
 *
 * @param {Provider} provider - Network provider
 *
 * @return {function} {@link #module_core.storeTransactions `storeTransactions`}
 */
exports.createStoreTransactions = function (_a) {
    var send = _a.send;
    /**
     * This method uses the connected IRI node's
     * [`storeTransactions`](https://docs.iota.org/docs/node-software/0.1/iri/references/api-reference#storeTransactions) endpoint to store the given transaction trytes.
     *
     * **Note:** Before calling this method, we recommend saving your transaction trytes in local storage.
     * By doing so, you make sure that you can always reattach your transactions to the Tangle in case they remain in a pending state.
     *
     * ## Related methods
     *
     * The given transaction trytes must be in a valid bundle and must include a proof of work.
     *
     * To create a valid bundle, use the `prepareTransfers()` method. For more information about what makes a bundles and transactions valid, see [this guide](https://docs.iota.org/docs/node-software/0.1/iri/concepts/transaction-validation).
     *
     * To do proof of work, use one of the following methods:
     *
     * - [`attachToTangle()`]{@link #module_core.attachToTangle}
     * - [`sendTrytes()`]{@link #module_core.sendTrytes}
     *
     * @method storeAndBroadcast
     *
     * @summary Stores the given transaction trytes on the connected IRI node.
     *
     * @memberof module:core
     *
     * @param {Trytes[]} trytes - Array of transaction trytes
     * @param {Callback} [callback] - Optional callback function
     *
     * @example
     * ```js
     * storeTransactions(trytes)
     * .then(transactionTrytes => {
     *     console.log(`Successfully stored transactions on the node`);
     *     console.log(JSON.stringify(transactionTrytes));
     * }).catch(error => {
     *     console.log(`Something went wrong: ${error}`)
     * })
     * ```
     *
     * @return {Promise}
     *
     * @fullfil {Trytes[]} transactionTrytes - Attached transaction trytes
     *
     * @reject {Error} error - An error that contains one of the following:
     * - `INVALID_TRANSACTION_TRYTES`: Make sure the trytes can be converted to a valid transaction object
     * - Fetch error: The connected IOTA node's API returned an error. See the [list of error messages](https://docs.iota.org/docs/node-software/0.1/iri/references/api-errors)
     */
    return function (trytes, callback) {
        return Promise.resolve(guards_1.validate([
            trytes,
            function (arr) {
                return arr.every(function (t) {
                    return guards_1.isTrytesOfExactLength(t, transaction_1.TRANSACTION_LENGTH / converter_1.TRYTE_WIDTH) && transaction_1.isAttached(converter_1.trytesToTrits(t));
                });
            },
            errors.INVALID_ATTACHED_TRYTES,
        ]))
            .then(function () {
            return send({
                command: types_1.IRICommand.STORE_TRANSACTIONS,
                trytes: trytes
            });
        })
            .then(function () { return trytes; })
            .asCallback(callback);
    };
};
//# sourceMappingURL=createStoreTransactions.js.map