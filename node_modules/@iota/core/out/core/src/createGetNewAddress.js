"use strict";
exports.__esModule = true;
var checksum_1 = require("@iota/checksum");
var Promise = require("bluebird");
var errors = require("../../errors");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
var _1 = require("./");
var createWereAddressesSpentFrom_1 = require("./createWereAddressesSpentFrom");
exports.createIsAddressUsed = function (provider) {
    var wereAddressesSpentFrom = createWereAddressesSpentFrom_1.createWereAddressesSpentFrom(provider, 'lib');
    var findTransactions = _1.createFindTransactions(provider);
    return function (address) {
        return wereAddressesSpentFrom([address]).then(function (_a) {
            var isSpent = _a[0];
            return findTransactions({ addresses: [address] }).then(function (transactions) { return ({
                isUsed: isSpent || transactions.length > 0,
                isSpent: isSpent,
                transactions: transactions
            }); });
        });
    };
};
/**
 * Generates and returns all addresses up to the first unused addresses including it.
 *
 * @method getUntilFirstUnusedAddress
 *
 * @ignore
 *
 * @memberof module:core
 *
 * @param {string} seed
 * @param {options} [options]
 * @param {number} [options.start=0] - Key index offset to start the search at
 * @param {number} [options.security=2] - Security level
 *
 * @return {Promise}
 *
 * @fulfil {Hash[]} List of addresses up to (and including) first unused address
 *
 * @reject {Error}
 * - `INVALID_SEED`
 * - `INVALID_START_OPTION`
 * - `INVALID_SECURITY`
 * - Fetch error
 */
exports.getUntilFirstUnusedAddress = function (isAddressUsed, seed, index, security, returnAll) {
    var addressList = [];
    var iterate = function () {
        var nextAddress = _1.generateAddress(seed, index++, security);
        if (returnAll) {
            addressList.push(nextAddress);
        }
        return isAddressUsed(nextAddress).then(function (_a) {
            var isUsed = _a.isUsed;
            if (isUsed) {
                return iterate();
            }
            // It may have already been added
            if (!returnAll) {
                addressList.push(nextAddress);
            }
            return addressList;
        });
    };
    return iterate;
};
exports.generateAddresses = function (seed, index, security, total) {
    if (total === void 0) { total = 1; }
    return Array(total)
        .fill('')
        .map(function () { return _1.generateAddress(seed, index++, security); });
};
exports.applyChecksumOption = function (checksum) { return function (addresses) {
    return checksum
        ? Array.isArray(addresses)
            ? addresses.map(function (addr) { return checksum_1.addChecksum(addr); })
            : checksum_1.addChecksum(addresses)
        : addresses;
}; };
exports.applyReturnAllOption = function (returnAll, total) { return function (addresses) {
    return returnAll || total ? addresses : addresses[addresses.length - 1];
}; };
exports.getNewAddressOptions = types_1.getOptionsWithDefaults({
    index: 0,
    security: 2,
    checksum: false,
    total: undefined,
    returnAll: false
});
/**
 * @method createGetNewAddress
 *
 * @summary Creates a new `getNewAddress()` method, using a custom Provider instance.
 *
 * @memberof module:core
 *
 * @ignore
 *
 * @param {Provider} provider - The Provider object that the method should use to call the node's API endpoints.
 *
 * @return {Function} [`getNewAddress`]{@link #module_core.getNewAddress}  - A new `getNewAddress()` function that uses your chosen Provider instance.
 */
exports.createGetNewAddress = function (provider, caller) {
    var isAddressUsed = exports.createIsAddressUsed(provider);
    /**
     * This method uses the connected IRI node's [`findTransactions`]{@link #module_core.findTransactions}
     * endpoint to search every transactions in the Tangle for each generated address. If an address is found in a transaction, a new address is generated until one is found that isn't in any transactions.
     *
     * **Note:** The given seed is used to [generate addresses](https://docs.iota.org/docs/client-libraries/0.1/how-to-guides/js/generate-an-address) on your local device. It is never sent anywhere.
     *
     * **Note:** Because of local snapshots, this method is not a reliable way of generating unspent addresses. Instead, you should use the [account module](https://docs.iota.org/docs/client-libraries/0.1/account-module/introduction/overview) to keep track of your spent addresses.
     *
     * ## Related methods
     *
     * To find out which of your addresses are spent, use the [`getAccountData()`]{@link #module_core.getAccountData} method.
     *
     * @method getNewAddress
     *
     * @summary Generates a new address for a given seed.
     *
     * @memberof module:core
     *
     * @param {string} seed - The seed to use to generate addresses
     * @param {Object} [options] - Options object
     * @param {number} [options.index=0] - The key index from which to start generating addresses
     * @param {number} [options.security=2] - The [security level](https://docs.iota.org/docs/getting-started/0.1/clients/security-levels) to use to generate the addresses
     * @param {boolean} [options.checksum=false] - `Deprecated`
     * @param {number} [options.total] - `Deprecated`
     * @param {boolean} [options.returnAll=false] - `Deprecated`
     * @param {Callback} [callback] - Optional callback function
     *
     * @example
     * ```js
     * getNewAddress(seed)
     *   .then(address => {
     *     console.log(`Here's your new address: ${address})
     *   })
     *   .catch(error => {
     *     console.log(`Something went wrong: ${error}`);
     *   })
     * ```
     *
     * @return {Promise}
     *
     * @fulfil {Hash|Hash[]} address - A single new address or an array of new addresses
     *
     * @reject {Error} error - An error that contains one of the following:
     * - `INVALID_SEED`: Make sure that the seed contains only trytes
     * - `INVALID_SECURITY_LEVEL`: Make sure that the security level is a number between 1 and 3
     * - `INVALID_START_OPTION`: Make sure that the `options.start` argument is greater than zero
     * - Fetch error: The connected IOTA node's API returned an error. See the [list of error messages](https://docs.iota.org/docs/node-software/0.1/iri/references/api-errors)
     */
    return function getNewAddress(seed, options, callback) {
        if (options === void 0) { options = {}; }
        if (caller !== 'lib') {
            var deprecated = [];
            if (options.total !== undefined) {
                deprecated.push(options.total);
            }
            if (options.returnAll !== undefined) {
                deprecated.push(options.returnAll);
            }
            if (options.checksum !== undefined) {
                deprecated.push(options.checksum);
            }
            /* tslint:disable-next-line:no-console */
            console.warn("`GetNewAddressOptions`: " + deprecated.join(',') + " options are deprecated and will be removed in v.2.0.0. \n");
        }
        var _a = exports.getNewAddressOptions(options), index = _a.index, security = _a.security, total = _a.total, returnAll = _a.returnAll, checksum = _a.checksum;
        return Promise.resolve(guards_1.validate(guards_1.seedValidator(seed), guards_1.indexValidator(index), guards_1.securityLevelValidator(security), (!!total || total === 0) && [total, function (t) { return Number.isInteger(t) && t > 0; }, errors.INVALID_TOTAL_OPTION]))
            .then(function () {
            return total && total > 0
                ? exports.generateAddresses(seed, index, security, total)
                : Promise["try"](exports.getUntilFirstUnusedAddress(isAddressUsed, seed, index, security, returnAll));
        })
            .then(exports.applyReturnAllOption(returnAll, total))
            .then(exports.applyChecksumOption(checksum))
            .asCallback(callback);
    };
};
//# sourceMappingURL=createGetNewAddress.js.map