"use strict";
exports.__esModule = true;
var Promise = require("bluebird");
var errors = require("../../errors");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
var _1 = require("./");
var createGetNewAddress_1 = require("./createGetNewAddress");
var defaults = {
    start: 0,
    end: undefined,
    threshold: undefined,
    security: 2
};
/**
 * @method createGetInputs
 *
 * @summary Creates a new `getInputs()` method, using a custom Provider instance.
 *
 * @memberof module:core
 *
 * @ignore
 *
 * @param {Provider} provider - The Provider object that the method should use to call the node's API endpoints.
 *
 * @return {Function} [`getInputs`]{@link #module_core.getInputs}  - A new `getInputs()` function that uses your chosen Provider instance.
 */
exports.createGetInputs = function (provider) {
    var getNewAddress = createGetNewAddress_1.createGetNewAddress(provider, 'lib');
    var getBalances = _1.createGetBalances(provider);
    /**
     * This method generates [addresses](https://docs.iota.org/docs/getting-started/0.1/clients/addresses) for a given seed and finds those that have a positive balance.
     *
     * **Note:** The given seed is used to [generate addresses](https://docs.iota.org/docs/client-libraries/0.1/how-to-guides/js/generate-an-address) on your local device. It is never sent anywhere.
     *
     * To find a certain amount of [IOTA tokens](https://docs.iota.org/docs/getting-started/0.1/clients/token) and return only the addresses that, when combined, contain that amount, pass it to the `options.threshold` argument.
     *
     * ## Related methods
     *
     * You may want to use this method to find inputs for the [`prepareTransfers()`]{@link #module_core.prepareTransfers} method.
     *
     * @method getInputs
     *
     * @summary Finds a seed's addresses that have a positive balance.
     *
     * @memberof module:core
     *
     * @param {string} seed - The seed to use to generate addresses
     * @param {Object} [options] - Options object
     * @param {number} [options.start=0] - The key index from which to start generating addresses
     * @param {number} [options.security=2] - The [security level](https://docs.iota.org/docs/getting-started/0.1/clients/security-levels) to use to generate the addresses
     * @paramÂ {number} [options.end] - The key index at which to stop generating addresses
     * @param {number} [options.threshold] - The amount of IOTA tokens that you want to find
     * @param {Callback} [callback] - Optional callback function
     *
     * @example
     *
     * ```js
     * getInputs(seed)
     *   .then(({ inputs, totalBalance }) => {
     *     console.log(`Your seed has a total of ${totalBalance} IOTA tokens \n` +
     *     `on the following addresses:`)
     *      for(let i = 0; i < inputs.length; i++) {
     *          console.log(`${inputs[i].address}: ${inputs[i].balance}`)
     *      }
     *   })
     *   .catch(error => {
     *     if (error.message === errors.INSUFFICIENT_BALANCE) {
     *        console.log('You have no IOTA tokens');
     *     }
     *   });
     * ```
     *
     * @return {Promise}
     *
     * @fulfil {Inputs} - Array that contains the following:
     * - input.addresses: An address
     * - input.keyIndex: The key index of the address
     * - input.security: The security level of the address
     * - input.balance: The amount of IOTA tokens in the address
     * - inputs.totalBalance: The combined balance of all addresses
     *
     * @reject {Error} error - An error that contains one of the following:
     * - `INVALID_SEED`: Make sure that the seed contains only trytes
     * - `INVALID_SECURITY_LEVEL`: Make sure that the security level is a number between 1 and 3
     * - `INVALID_START_OPTION`: Make sure that the `options.start` argument is greater than zero
     * - `INVALID_START_END_OPTIONS`: Make sure that the `options.end` argument is not greater than the `options.start` argument by more than 1,000`
     * - Fetch error: The connected IOTA node's API returned an error. See the [list of error messages](https://docs.iota.org/docs/node-software/0.1/iri/references/api-errors) `
     * - `INVALID_THRESHOLD`: Make sure that the threshold is a number greater than zero
     * - `INSUFFICIENT_BALANCE`: Make sure that the seed has addresses that contain IOTA tokens
     * - Fetch error: The connected IOTA node's API returned an error. See the [list of error messages](https://docs.iota.org/docs/node-software/0.1/iri/references/api-errors)
     */
    return function (seed, options, callback) {
        if (options === void 0) { options = {}; }
        var _a = exports.getInputsOptions(options), start = _a.start, end = _a.end, security = _a.security, threshold = _a.threshold;
        return Promise.resolve(exports.validateGetInputsOptions(seed, { start: start, end: end, security: security, threshold: threshold }))
            .then(function () { return exports.inputsToAddressOptions({ start: start, end: end, security: security, threshold: threshold }); })
            .then(function (newAddressOptions) { return getNewAddress(seed, newAddressOptions); })
            .then(function (allAddresses) { return types_1.asArray(allAddresses); })
            .then(function (allAddresses) {
            return getBalances(allAddresses)
                .then(function (_a) {
                var balances = _a.balances;
                return exports.createInputsObject(allAddresses, balances, start, security);
            })
                .then(function (res) { return exports.filterByThreshold(res, threshold); })
                .tap(function (inputs) { return exports.hasSufficientBalance(inputs, threshold); });
        })
            .asCallback(callback);
    };
};
exports.getInputsOptions = types_1.getOptionsWithDefaults(defaults);
exports.validateGetInputsOptions = function (seed, options) {
    var security = options.security, start = options.start, end = options.end, threshold = options.threshold;
    return guards_1.validate(guards_1.seedValidator(seed), guards_1.securityLevelValidator(security), guards_1.startOptionValidator(start), typeof end !== undefined && guards_1.startEndOptionsValidator({ start: start, end: end }), !!threshold && guards_1.getInputsThresholdValidator(threshold));
};
exports.inputsToAddressOptions = function (_a) {
    var start = _a.start, end = _a.end, security = _a.security;
    return end
        ? createGetNewAddress_1.getNewAddressOptions({ index: start, total: end - start + 1, security: security, returnAll: true })
        : createGetNewAddress_1.getNewAddressOptions({ index: start, security: security, returnAll: true });
};
exports.createInputsObject = function (addresses, balances, start, security) {
    var inputs = addresses
        .map(function (address, i) { return types_1.makeAddress(address, balances[i], start + i, security); })
        .filter(function (address) { return address.balance > 0; });
    var totalBalance = inputs.reduce(function (acc, addr) { return (acc += addr.balance); }, 0);
    return { inputs: inputs, totalBalance: totalBalance };
};
exports.filterByThreshold = function (_a, threshold) {
    var inputs = _a.inputs, totalBalance = _a.totalBalance;
    return threshold
        ? inputs.reduce(function (acc, input) {
            return acc.totalBalance < threshold
                ? { inputs: acc.inputs.concat([input]), totalBalance: acc.totalBalance + input.balance }
                : acc;
        }, { inputs: [], totalBalance: 0 })
        : { inputs: inputs, totalBalance: totalBalance };
};
exports.hasSufficientBalance = function (inputs, threshold) {
    if (threshold && inputs.totalBalance < threshold) {
        throw new Error(errors.INSUFFICIENT_BALANCE);
    }
    return inputs;
};
//# sourceMappingURL=createGetInputs.js.map