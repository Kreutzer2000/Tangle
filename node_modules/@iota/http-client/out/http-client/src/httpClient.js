"use strict";
/** @module http-client */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var _a;
var Promise = require("bluebird");
var types_1 = require("../../types");
var request_1 = require("./request");
var settings_1 = require("./settings");
var BATCH_SIZE = 1000;
/* Batchable keys for each command */
exports.batchableKeys = (_a = {},
    _a[types_1.IRICommand.FIND_TRANSACTIONS] = ['addresses', 'approvees', 'bundles', 'tags'],
    _a[types_1.IRICommand.GET_BALANCES] = ['addresses'],
    _a[types_1.IRICommand.GET_INCLUSION_STATES] = ['tips', 'transactions'],
    _a[types_1.IRICommand.GET_TRYTES] = ['hashes'],
    _a);
exports.isBatchableCommand = function (command) {
    return command.command === types_1.IRICommand.FIND_TRANSACTIONS ||
        command.command === types_1.IRICommand.GET_BALANCES ||
        command.command === types_1.IRICommand.GET_INCLUSION_STATES ||
        command.command === types_1.IRICommand.GET_TRYTES;
};
exports.getKeysToBatch = function (command, batchSize) {
    if (batchSize === void 0) { batchSize = BATCH_SIZE; }
    return Object.keys(command).filter(function (key) {
        return exports.batchableKeys[command.command].indexOf(key) > -1 &&
            Array.isArray(command[key]) &&
            command[key].length > batchSize;
    });
};
/**
 * This method creates an HTTP client that you can use to send requests to the [IRI API endpoints](https://docs.iota.org/docs/node-software/0.1/iri/references/api-reference).
 *
 * ## Related methods
 *
 * To send requests to the IRI node, use the [`send()`]{@link #module_http-client.send} method.
 *
 * @method createHttpClient
 *
 * @summary Creates an HTTP client to access the IRI API.
 *
 * @memberof module:http-client
 *
 * @param {Object} [settings={}]
 * @param {String} [settings.provider=http://localhost:14265] URI of an IRI node to connect to
 * @param {String | number} [settings.apiVersion=1] - IOTA API version to be sent in the `X-IOTA-API-Version` header.
 * @param {number} [settings.requestBatchSize=1000] - Number of search values per request
 *
 * @example
 * ```js
 * let settings = {
 *  provider: 'http://mynode.eu:14265'
 * }
 *
 * let httpClient = HttpClient.createHttpClient(settings);
 * ```
 *
 * @return HTTP client object
 */
exports.createHttpClient = function (settings) {
    var currentSettings = settings_1.getSettingsWithDefaults(__assign({}, settings));
    return {
        /**
        * This method uses the HTTP client to send requests to the [IRI API endpoints](https://docs.iota.org/docs/node-software/0.1/iri/references/api-reference).
        *
        * ## Related methods
        *
        * To create an HTTP client, use the [`createHttpClient()`]{@link #module_http-client.createHttpClient} method.
        *
        * @method createHttpClient
        *
        * @summary Sends an API request to the connected IRI node.
        *
        * @param {Object} command - The request body for the API endpoint
        *
        * @example
        * ```js
        * let httpClient = HttpClient.createHttpClient(settings);
        * httpClient.send({command:'getNodeInfo'})
        * .then(response => {
        *   console.log(response);
        * })
        * .catch(error => {
        *   console.log(error);
        * })
        * ```
        *
        * @return {Promise}
        *
        * @fulfil {Object} response - The response from the IRI node
        *
        * @reject {Object} error - The connected IOTA node's API returned an error. See the [list of error messages](https://docs.iota.org/docs/node-software/0.1/iri/references/api-errors)
        */
        send: function (command) {
            return Promise["try"](function () {
                var provider = currentSettings.provider, user = currentSettings.user, password = currentSettings.password, requestBatchSize = currentSettings.requestBatchSize, apiVersion = currentSettings.apiVersion, agent = currentSettings.agent;
                if (exports.isBatchableCommand(command)) {
                    var keysToBatch = exports.getKeysToBatch(command, requestBatchSize);
                    if (keysToBatch.length) {
                        return request_1.batchedSend({ command: command, uri: provider, user: user, password: password, apiVersion: apiVersion, agent: agent }, keysToBatch, requestBatchSize);
                    }
                }
                return request_1.send({ command: command, uri: provider, user: user, password: password, apiVersion: apiVersion, agent: agent });
            });
        },
        /**
        * This method updates the settings of an existing HTTP client.
        *
        * ## Related methods
        *
        * To create an HTTP client, use the [`createHttpClient()`]{@link #module_http-client.createHttpClient} method.
        *
        * @method setSettings
        *
        * @summary Updates the settings of an existing HTTP client.
        *
        * @param {Object} [settings={}]
        * @param {String} [settings.provider=http://localhost:14265] URI of an IRI node to connect to
        * @param {String | number} [settings.apiVersion=1] - IOTA API version to be sent in the `X-IOTA-API-Version` header.
        * @param {number} [settings.requestBatchSize=1000] - Number of search values per request.
        *
        * @example
        * ```js
        * let settings = {
        *   provider: 'https://nodes.devnet.thetangle.org:443'
        *   }
        *
        * let httpClient = http.createHttpClient(settings);
        * httpClient.send({command:'getNodeInfo'}).then(res => {
        *   console.log(res)
        * }).catch(err => {
        *   console.log(err)
        * });
        *
        * httpClient.setSettings({provider:'http://newnode.org:14265'});
        *
        * httpClient.send({command:'getNodeInfo'}).then(res => {
        *   console.log(res)
        * }).catch(err => {
        *   console.log(err)
        * })
        * ```
        *
        * @return {void}
        */
        setSettings: function (newSettings) {
            currentSettings = settings_1.getSettingsWithDefaults(__assign({}, currentSettings, newSettings));
        }
    };
};
//# sourceMappingURL=httpClient.js.map