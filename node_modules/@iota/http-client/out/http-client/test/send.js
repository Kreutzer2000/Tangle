"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var http_1 = require("http");
var https_1 = require("https");
var nock = require("nock");
var types_1 = require("../../types");
exports.apiVersion = 1;
exports.requestBatchSize = 3;
exports.headers = function (version) {
    if (version === void 0) { version = exports.apiVersion; }
    return ({
        reqheaders: {
            'Content-Type': 'application/json',
            'X-IOTA-API-Version': version.toString()
        }
    });
};
exports.agents = function (options) {
    return Object.assign(options.host.startsWith('https') ? new https_1.Agent() : new http_1.Agent(), options);
};
exports.findTransactionsCommand = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: ['A'.repeat(81), 'B'.repeat(81), 'C'.repeat(81)],
    tags: ['A'.repeat(27), 'B'.repeat(27), 'C'.repeat(27)],
    approvees: ['D'.repeat(81), 'E'.repeat(81), 'F'.repeat(81)]
};
exports.findTransactionsResponse = {
    hashes: ['H'.repeat(81)]
};
exports.invalidCommand = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: ['asdfsf']
};
exports.invalidGetTransactionsToApproveCommand = {
    command: types_1.IRICommand.GET_TRANSACTIONS_TO_APPROVE,
    depth: 42000
};
exports.invalidGetTransactionsToApproveResponse = {
    error: 'Invalid depth input',
    duration: 0
};
exports.invalidGetTransactionsToApproveCommandIgnored = {
    command: types_1.IRICommand.GET_TRANSACTIONS_TO_APPROVE,
    depth: 42001
};
exports.validSendNock = nock('http://localhost:24265', exports.headers())
    .persist()
    .post('/', exports.findTransactionsCommand)
    .reply(200, exports.findTransactionsResponse);
exports.InvalidSendNock = nock('http://localhost:24265', exports.headers())
    .persist()
    .post('/', exports.invalidCommand)
    .reply(400);
exports.InvalidGetTransactionsToApproveCommandNock = nock('http://localhost:24265', exports.headers())
    .persist()
    .post('/', exports.invalidGetTransactionsToApproveCommand)
    .reply(400, exports.invalidGetTransactionsToApproveResponse);
exports.invalidJSONResponseNock = nock('http://localhost:24265', exports.headers())
    .persist()
    .post('/', exports.invalidGetTransactionsToApproveCommandIgnored)
    .reply(400, 'Invalid json');
exports.basicAuthNock = nock('https://localhost:24265', __assign({}, exports.headers(), { Authorization: "Basic " + Buffer.from('user:password').toString('base64') }))
    .persist()
    .post('/', exports.findTransactionsCommand)
    .reply(200, exports.findTransactionsResponse);
//# sourceMappingURL=send.js.map