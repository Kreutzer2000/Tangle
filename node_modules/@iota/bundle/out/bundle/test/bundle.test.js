"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var converter_1 = require("@iota/converter");
var kerl_1 = require("@iota/kerl");
var signing_1 = require("@iota/signing");
var transaction_1 = require("@iota/transaction");
var src_1 = require("../src");
var riteway_1 = require("riteway");
var errors = require("../../errors");
var samples_1 = require("./samples");
var bundleHash = function (bundleTrits) {
    var sponge = new kerl_1["default"]();
    var out = new Int8Array(transaction_1.BUNDLE_LENGTH);
    for (var offset = 0; offset < transaction_1.bundle.length; offset += transaction_1.TRANSACTION_LENGTH) {
        sponge.absorb(transaction_1.transactionEssence(bundleTrits, offset), 0, transaction_1.TRANSACTION_ESSENCE_LENGTH);
    }
    sponge.squeeze(out, 0, transaction_1.BUNDLE_LENGTH);
    return out;
};
var entries = [
    {
        signatureOrMessage: samples_1.signaturesOrMessages[0],
        address: samples_1.addresses[0],
        value: samples_1.values[0],
        obsoleteTag: samples_1.obsoleteTag,
        issuanceTimestamp: samples_1.issuanceTimestamp,
        tag: samples_1.tag
    },
    {
        signatureOrMessage: samples_1.signaturesOrMessages[1],
        address: samples_1.addresses[1],
        value: samples_1.values[1],
        obsoleteTag: samples_1.obsoleteTag,
        issuanceTimestamp: samples_1.issuanceTimestamp,
        tag: samples_1.tag
    },
    {
        signatureOrMessage: samples_1.signaturesOrMessages[2],
        address: samples_1.addresses[2],
        value: samples_1.values[2],
        obsoleteTag: samples_1.obsoleteTag,
        issuanceTimestamp: samples_1.issuanceTimestamp,
        tag: samples_1.tag
    },
];
var actualInterimBundle = src_1.createBundle(entries);
var actualInterimBundlePartial = src_1.createBundle(entries.slice(0, entries.length - 1));
var actualFinalBundle = src_1.finalizeBundle(actualInterimBundle);
var actualFinalSignedBundle = signing_1.signatureFragments(samples_1.seed, 0, 2, transaction_1.bundle(actualFinalBundle)).then(function (signature) {
    return src_1.addSignatureOrMessage(actualFinalBundle, signature, 1);
});
riteway_1.describe('createBundle(entries: ReadonlyArray<Partial<BundleEntry>>)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'entries with signatureOrMessage of length that is not multiple of fragment length',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.createBundle, [{ signatureOrMessage: new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH - 1) }]),
            expected: new RangeError(errors.ILLEGAL_SIGNATURE_OR_MESSAGE_LENGTH)
        });
        assert({
            given: 'entries with signatureOrMessage of 0 length',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.createBundle, [{ signatureOrMessage: new Int8Array(0) }]),
            expected: new RangeError(errors.ILLEGAL_SIGNATURE_OR_MESSAGE_LENGTH)
        });
        assert({
            given: 'entries with address of illegal length (< exact length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.createBundle, [{ address: new Int8Array(transaction_1.ADDRESS_LENGTH - 1) }]),
            expected: new RangeError(errors.ILLEGAL_ADDRESS_LENGTH)
        });
        assert({
            given: 'entries with address of illegal length (> exact length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.createBundle, [{ address: new Int8Array(transaction_1.ADDRESS_LENGTH + 1) }]),
            expected: new RangeError(errors.ILLEGAL_ADDRESS_LENGTH)
        });
        assert({
            given: 'entries with value of illegal length (> max length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.createBundle, [{ value: new Int8Array(transaction_1.VALUE_LENGTH + 1) }]),
            expected: new RangeError(errors.ILLEGAL_VALUE_LENGTH)
        });
        assert({
            given: 'entries with obsoleteTag of illegal length (> max length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.createBundle, [{ obsoleteTag: new Int8Array(transaction_1.OBSOLETE_TAG_LENGTH + 1) }]),
            expected: new RangeError(errors.ILLEGAL_OBSOLETE_TAG_LENGTH)
        });
        assert({
            given: 'entries with issuanceTimestamp of illegal length (> max length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.createBundle, [{ issuanceTimestamp: new Int8Array(transaction_1.ISSUANCE_TIMESTAMP_LENGTH + 1) }]),
            expected: new RangeError(errors.ILLEGAL_ISSUANCE_TIMESTAMP_LENGTH)
        });
        assert({
            given: 'entries with tag of illegal length (> max length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.createBundle, [{ tag: new Int8Array(transaction_1.TAG_LENGTH + 1) }]),
            expected: new RangeError(errors.ILLEGAL_TAG_LENGTH)
        });
        assert({
            given: 'valid entries',
            should: 'produce correct interim bundle',
            actual: actualInterimBundle,
            expected: samples_1.interimBundle
        });
        assert({
            given: 'empty entries',
            should: 'produce empty interim bundle',
            actual: src_1.createBundle([{}]),
            expected: new Int8Array(transaction_1.TRANSACTION_LENGTH)
        });
        assert({
            given: 'no entries',
            should: 'produce no bundle',
            actual: src_1.createBundle(),
            expected: new Int8Array(0)
        });
        return [2 /*return*/];
    });
}); });
riteway_1.describe('addEntry(bundle: Int8Array, entry: Partial<BundleEntry>)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'given bundle of length that is not multiple of transaction length',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.addEntry, new Int8Array(transaction_1.TRANSACTION_LENGTH - 1), entries[0]),
            expected: new RangeError(errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH)
        });
        assert({
            given: 'entry with signatureOrMessage of length that is not multiple of fragment length',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.addEntry, new Int8Array(0), {
                signatureOrMessage: new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH - 1)
            }),
            expected: new RangeError(errors.ILLEGAL_SIGNATURE_OR_MESSAGE_LENGTH)
        });
        assert({
            given: 'entry with signatureOrMessage of 0 length',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.addEntry, new Int8Array(0), { signatureOrMessage: new Int8Array(0) }),
            expected: new RangeError(errors.ILLEGAL_SIGNATURE_OR_MESSAGE_LENGTH)
        });
        assert({
            given: 'entry with address of illegal length (< exact length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.addEntry, new Int8Array(0), { address: new Int8Array(transaction_1.ADDRESS_LENGTH - 1) }),
            expected: new RangeError(errors.ILLEGAL_ADDRESS_LENGTH)
        });
        assert({
            given: 'entry with address of illegal length (> exact length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.addEntry, new Int8Array(0), { address: new Int8Array(transaction_1.ADDRESS_LENGTH + 1) }),
            expected: new RangeError(errors.ILLEGAL_ADDRESS_LENGTH)
        });
        assert({
            given: 'entry with value of illegal length (> max length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.addEntry, new Int8Array(0), { value: new Int8Array(transaction_1.VALUE_LENGTH + 1) }),
            expected: new RangeError(errors.ILLEGAL_VALUE_LENGTH)
        });
        assert({
            given: 'entry with obsoleteTag of illegal length (> max length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.addEntry, new Int8Array(0), {
                obsoleteTag: new Int8Array(transaction_1.OBSOLETE_TAG_LENGTH + 1)
            }),
            expected: new RangeError(errors.ILLEGAL_OBSOLETE_TAG_LENGTH)
        });
        assert({
            given: 'entry with issuanceTimestamp of illegal length (> max length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.addEntry, new Int8Array(0), {
                issuanceTimestamp: new Int8Array(transaction_1.ISSUANCE_TIMESTAMP_LENGTH + 1)
            }),
            expected: new RangeError(errors.ILLEGAL_ISSUANCE_TIMESTAMP_LENGTH)
        });
        assert({
            given: 'entry with tag of illegal length (> max length)',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.addEntry, new Int8Array(0), __assign({}, entries[0], { tag: new Int8Array(transaction_1.TAG_LENGTH + 1) })),
            expected: new RangeError(errors.ILLEGAL_TAG_LENGTH)
        });
        assert({
            given: 'valid entry',
            should: 'produce correct interim bundle',
            actual: src_1.addEntry(actualInterimBundlePartial, entries[entries.length - 1]),
            expected: samples_1.interimBundle
        });
        assert({
            given: 'empty entry',
            should: 'do nothing',
            actual: src_1.addEntry(new Int8Array(0), {}),
            expected: new Int8Array(transaction_1.TRANSACTION_LENGTH)
        });
        return [2 /*return*/];
    });
}); });
riteway_1.describe('finalizeBundle(bundle: Int8Array)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'given bundle of 0 length',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.finalizeBundle, new Int8Array(0)),
            expected: new RangeError(errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH)
        });
        assert({
            given: 'given bundle of length that is not multiple of transaction length',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.finalizeBundle, new Int8Array(transaction_1.TRANSACTION_LENGTH - 1)),
            expected: new RangeError(errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH)
        });
        assert({
            given: 'valid interim bundle',
            should: 'produce correct final bundle',
            actual: actualFinalBundle,
            expected: samples_1.finalBundle
        });
        assert({
            given: 'insecure bundle (normalized bundle hash contains value 13)',
            should: 'increment obsolete tag and recompute bundle hash',
            actual: {
                insecureInterimBundle: signing_1.normalizedBundle(bundleHash(actualInterimBundle)).indexOf(signing_1.MAX_TRYTE_VALUE /* 13 */) > -1,
                secureFinalBundle: signing_1.normalizedBundle(transaction_1.bundle(actualFinalBundle)).indexOf(signing_1.MAX_TRYTE_VALUE /* 13 */) === -1,
                obsoleteTag: transaction_1.obsoleteTag(actualFinalBundle)
            },
            expected: {
                insecureInterimBundle: true,
                secureFinalBundle: true,
                obsoleteTag: converter_1.trytesToTrits('EF9999999999999999999999999')
            }
        });
        return [2 /*return*/];
    });
}); });
riteway_1.describe('addSignatureOrMessage(bundle: Int8Array, signatureOrMessage: Int8Array, index: number)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                assert({
                    given: 'given bundle of 0 length',
                    should: 'throw RangeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(0), new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH), 0),
                    expected: new RangeError(errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH)
                });
                assert({
                    given: 'given bundle of length that is not multiple of transaction length',
                    should: 'throw RangeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(transaction_1.TRANSACTION_LENGTH - 1), new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH), 0),
                    expected: new RangeError(errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH)
                });
                assert({
                    given: 'given signatureOrMessage of length that is not multiple of fragment length',
                    should: 'throw RangeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(transaction_1.TRANSACTION_LENGTH), new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH - 1), 0),
                    expected: new RangeError(errors.ILLEGAL_SIGNATURE_OR_MESSAGE_LENGTH)
                });
                assert({
                    given: 'given signatureOrMessage of 0 length',
                    should: 'throw RangeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(transaction_1.TRANSACTION_LENGTH), new Int8Array(0), 0),
                    expected: new RangeError(errors.ILLEGAL_SIGNATURE_OR_MESSAGE_LENGTH)
                });
                assert({
                    given: 'index = undefined',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(transaction_1.TRANSACTION_LENGTH), new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH), undefined),
                    expected: new TypeError(errors.ILLEGAL_TRANSACTION_INDEX)
                });
                assert({
                    given: 'index = NaN',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(transaction_1.TRANSACTION_LENGTH), new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH), NaN),
                    expected: new TypeError(errors.ILLEGAL_TRANSACTION_INDEX)
                });
                assert({
                    given: 'index = null',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(transaction_1.TRANSACTION_LENGTH), new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH), null),
                    expected: new TypeError(errors.ILLEGAL_TRANSACTION_INDEX)
                });
                assert({
                    given: 'index = Infinity',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(transaction_1.TRANSACTION_LENGTH), new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH), Infinity),
                    expected: new TypeError(errors.ILLEGAL_TRANSACTION_INDEX)
                });
                assert({
                    given: 'index = "0" (string)',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(transaction_1.TRANSACTION_LENGTH), new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH), '0'),
                    expected: new TypeError(errors.ILLEGAL_TRANSACTION_INDEX)
                });
                assert({
                    given: 'out-of-range index (< 0)',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(transaction_1.TRANSACTION_LENGTH), new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH), -1),
                    expected: new RangeError(errors.ILLEGAL_TRANSACTION_INDEX)
                });
                assert({
                    given: 'out-of-range index (> 0)',
                    should: 'throw RangeError',
                    actual: riteway_1.Try(src_1.addSignatureOrMessage, new Int8Array(transaction_1.TRANSACTION_LENGTH * 3), new Int8Array(transaction_1.SIGNATURE_OR_MESSAGE_LENGTH * 2), 2),
                    expected: new RangeError(errors.ILLEGAL_TRANSACTION_INDEX)
                });
                _a = assert;
                _b = {
                    given: 'valid final bundle',
                    should: 'produce correct signed bundle'
                };
                _c = converter_1.tritsToTrytes;
                return [4 /*yield*/, actualFinalSignedBundle];
            case 1:
                _a.apply(void 0, [(_b.actual = _c.apply(void 0, [_d.sent()]),
                        _b.expected = converter_1.tritsToTrytes(samples_1.finalSignedBundle),
                        _b)]);
                return [2 /*return*/];
        }
    });
}); });
riteway_1.describe('valueSum(buffer: Int8Array, offset: number, length: number): number', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'buffer of length that is not multiple of transaction length',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH - 1), 0, transaction_1.TRANSACTION_LENGTH),
            expected: new RangeError(errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH)
        });
        assert({
            given: 'offset that is not multiple of transaction length',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), 1, transaction_1.TRANSACTION_LENGTH),
            expected: new RangeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'length that is not multiple of transaction length',
            should: 'throw RangeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), 0, transaction_1.TRANSACTION_LENGTH - 1),
            expected: new RangeError(errors.ILLEGAL_BUNDLE_LENGTH)
        });
        assert({
            given: 'offset = undefined',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), undefined, transaction_1.TRANSACTION_LENGTH),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'offset = NaN',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), NaN, transaction_1.TRANSACTION_LENGTH),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'offset = null',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), null, transaction_1.TRANSACTION_LENGTH),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'offset = Infinity',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), Infinity, transaction_1.TRANSACTION_LENGTH),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'offset = "0" (string)',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), '0', transaction_1.TRANSACTION_LENGTH),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'offset = 0.1',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), 0.1, transaction_1.TRANSACTION_LENGTH),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'length = undefined',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), 0, undefined),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'length = NaN',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), 0, NaN),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'length = null',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), 0, null),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'length = Infinity',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), 0, Infinity),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'length = "0" (string)',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), 0, '0'),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'length = 0.1',
            should: 'throw TypeError',
            actual: riteway_1.Try(src_1.valueSum, new Int8Array(transaction_1.TRANSACTION_LENGTH), 0, 0.1),
            expected: new TypeError(errors.ILLEGAL_TRANSACTION_OFFSET)
        });
        assert({
            given: 'valid buffer',
            should: 'calculate value sum',
            actual: (function () {
                var buffer = new Int8Array(3 * transaction_1.TRANSACTION_LENGTH).fill(0);
                var offset = transaction_1.TRANSACTION_LENGTH;
                var length = transaction_1.TRANSACTION_LENGTH * 2;
                buffer.set(converter_1.valueToTrits(10000), transaction_1.VALUE_OFFSET);
                buffer.set(converter_1.valueToTrits(-9), offset + transaction_1.VALUE_OFFSET);
                buffer.set(converter_1.valueToTrits(10), offset + transaction_1.TRANSACTION_LENGTH + transaction_1.VALUE_OFFSET);
                return src_1.valueSum(buffer, offset, length);
            })(),
            expected: 1
        });
        return [2 /*return*/];
    });
}); });
//# sourceMappingURL=bundle.test.js.map