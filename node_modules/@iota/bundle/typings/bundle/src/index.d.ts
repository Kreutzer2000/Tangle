/** @module bundle */
import '../../typed-array';
export interface BundleEntry {
    readonly signatureOrMessage: Int8Array;
    readonly address: Int8Array;
    readonly value: Int8Array;
    readonly obsoleteTag: Int8Array;
    readonly issuanceTimestamp: Int8Array;
    readonly tag: Int8Array;
}
/**
 * @method createBundle
 *
 * @summary Creates a bundle array from the given transaction entries.
 *
 * @param {BundleEntry[]} [entries=[]] - Entries of single or multiple transactions with the same address
 *
 * @return {Int8Array[]} List of transactions in the bundle
 */
export declare const createBundle: (entries?: readonly Partial<BundleEntry>[]) => Int8Array;
/**
 * Adds transaction trits in the given entry object to a given bundle array.
 *
 * ## Related methods
 *
 * See the [converter](https://github.com/iotaledger/iota.js/tree/next/packages/converter) package for methods that convert values to trits.
 *
 * @method addEntry
 *
 * @summary Adds the given transaction entry to a bundle array.
 *
 * @memberof module:bundle
 *
 * @param {object} entry - Transaction entry object
 * @param {Int8Array} entry.address - An address in trits
 * @param {Int8Array} entry.value - An amount of IOTA tokens in trits
 * @param {Int8Array} [entry.signatureOrMessage] - Signature fragments or a message in trits
 * @param {Int8Array} [entry.issuanceTimestamp] - Unix epoch in trits
 * @param {Int8Array} [entry.tag] - (deprecated)
 * @param {Int8Array} bundle - Bundle array to which to add the entry object
 *
 * @example
 * ```js
 * let bundle = new Int8Array();
 *
 * bundle = Bundle.addEntry(bundle, {
 *  address: Converter.trytesToTrits(outputAddress),
 *  value: Converter.valueToTrits(value),
 *  issuanceTimestamp: Converter.valueToTrits(Math.floor(Date.now() / 1000));
 * });
 * ```
 *
 * @return {Int8Array} A copy of the original bundle that also includes the added entries.
 *
 * @throws {errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH}: Make sure that the `bundle` argument contains valid transaction trits
 * @throws {errors.ILLEGAL_SIGNATURE_OR_MESSAGE_LENGTH}: Make sure that the `entry.signatureOrMessage` argument contains 6,561 trits
 * @throws {errors.ILLEGAL_ADDRESS_LENGTH}: Make sure that the `entry.address` argument contains 243 trits
 * @throws {errors.ILLEGAL_VALUE_LENGTH}: Make sure that the `entry.value` argument contains 6,561 trits
 * @throws {errors.ILLEGAL_ISSUANCE_TIMESTAMP_LENGTH}: Make sure that the `entry.timestamp` argument contains 81 trits
 */
export declare const addEntry: (bundle: Int8Array, entry: Partial<BundleEntry>) => Int8Array;
/**
 * This method takes an array of transaction trits, generates the bundle hash, and adds it to each transaction.
 *
 * ## Related methods
 *
 * See the [`addEntry()`]{@link #module_bundle.addEntry} method for creating new bundles.
 *
 * @method finalizeBundle
 *
 * @summary Generates a bundle hash.
 *
 * @memberof module:bundle
 *
 * @param {Int8Array} bundle - Transaction trits
 *
 * @example
 * ```js
 * const result = Bundle.finalizeBundle(bundle);
 * ```
 *
 * @return {Int8Array} Transaction trits that include a bundle hash
 *
 * @throws {errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH}: Make sure that the `bundle` argument contains valid transaction trits
 */
export declare const finalizeBundle: (bundle: Int8Array, numberOfFragments?: number) => Int8Array;
/**
 * This method takes an array of transaction trits, and add the given message or signature to the transactions, starting from the given index.
 *
 * If the signature or message is too long to fit in a single transaction, it is split across the next transaction in the bundle, starting from the given index.
 *
 * ## Related methods
 *
 * See the [`addEntry()`]{@link #module_bundle.addEntry} method for creating new bundles.
 *
 * @method addSignatureOrMessage
 *
 * @summary Adds signature message fragments to transactions in a bundle.
 *
 * @memberof module:bundle
 *
 * @param {Int8Array} bundle - Transaction trits
 * @param {Int8Array} signatureOrMessage - Signature or message to add to the bundle
 * @param {number} index - Transaction index at which to start adding the signature or message
 *
 * @example
 * ```js
 * const signature = Converter.trytesToTrits('SIGNATURE...')
 * bundle.set(Bundle.addSignatureOrMessage(bundle, signature, 1));
 * ```
 *
 * @return {Int8Array} Transaction trits that include a bundle hash.
 *
 * @throws {errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH}: Make sure that the `bundle` argument contains valid transaction trits
 * @throws {errors.ILLEGAL_TRANSACTION_INDEX}: Make sure that the `index` argument is a number and that the bundle contains enough transactions
 * @throws {errors.ILLEGAL_SIGNATURE_OR_MESSAGE_LENGTH}: Make sure that the `signatureOrMessage` argument contains at least 6,561 trits
 *
 */
export declare const addSignatureOrMessage: (bundle: Int8Array, signatureOrMessage: Int8Array, index: number) => Int8Array;
export declare const valueSum: (buffer: Int8Array, offset: number, length: number) => number;
