import '../../typed-array';
export declare const SIGNATURE_OR_MESSAGE_OFFSET = 0;
export declare const SIGNATURE_OR_MESSAGE_LENGTH: number;
export declare const ADDRESS_OFFSET: number;
export declare const ADDRESS_LENGTH: number;
export declare const VALUE_OFFSET: number;
export declare const VALUE_LENGTH = 81;
export declare const OBSOLETE_TAG_OFFSET: number;
export declare const OBSOLETE_TAG_LENGTH = 81;
export declare const ISSUANCE_TIMESTAMP_OFFSET: number;
export declare const ISSUANCE_TIMESTAMP_LENGTH = 27;
export declare const CURRENT_INDEX_OFFSET: number;
export declare const CURRENT_INDEX_LENGTH = 27;
export declare const LAST_INDEX_OFFSET: number;
export declare const LAST_INDEX_LENGTH = 27;
export declare const BUNDLE_OFFSET: number;
export declare const BUNDLE_LENGTH: number;
export declare const TRUNK_TRANSACTION_OFFSET: number;
export declare const TRUNK_TRANSACTION_LENGTH: number;
export declare const BRANCH_TRANSACTION_OFFSET: number;
export declare const BRANCH_TRANSACTION_LENGTH: number;
export declare const TAG_OFFSET: number;
export declare const TAG_LENGTH = 81;
export declare const ATTACHMENT_TIMESTAMP_OFFSET: number;
export declare const ATTACHMENT_TIMESTAMP_LENGTH = 27;
export declare const ATTACHMENT_TIMESTAMP_LOWER_BOUND_OFFSET: number;
export declare const ATTACHMENT_TIMESTAMP_LOWER_BOUND_LENGTH = 27;
export declare const ATTACHMENT_TIMESTAMP_UPPER_BOUND_OFFSET: number;
export declare const ATTACHMENT_TIMESTAMP_UPPER_BOUND_LENGTH = 27;
export declare const TRANSACTION_NONCE_OFFSET: number;
export declare const TRANSACTION_NONCE_LENGTH = 81;
export declare const TRANSACTION_ESSENCE_OFFSET: number;
export declare const TRANSACTION_ESSENCE_LENGTH: number;
export declare const TRANSACTION_LENGTH: number;
export declare const TRANSACTION_HASH_LENGTH: number;
/**
 * Checks if given value is a valid transaction buffer length or offset.
 *
 * @method isMultipleOfTransactionLength
 *
 * @param {Int8Array} lengthOrOffset
 *
 * @return {boolean}
 */
export declare const isMultipleOfTransactionLength: (lengthOrOffset: number) => boolean;
/**
 * Creates a function that copies a fixed size part of the buffer.
 *
 * @method transactionBufferSlice
 *
 * @param {number} transactionFieldOffset
 * @param {number} transactionFieldLength
 *
 * @return {Function}
 *
 * @ignore
 */
export declare const transactionBufferSlice: (transactionFieldOffset: number, transactionFieldLength: number) => (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Gets the `signatureOrMessage` field of all transactions in a bundle.
 *
 * @method signatureOrMessage
 *
 * @param {Int8Array} buffer - Transaction trytes
 *
 * @return {Int8Array}
 */
export declare const signatureOrMessage: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `address` field.
 *
 * @method address
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const address: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `value` field.
 *
 * @method value
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const value: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
export declare const createObsoleteTag: (warn?: boolean) => (buffer: Int8Array, offset?: number) => Int8Array;
export declare const obsoleteTag: (buffer: Int8Array, offset?: number) => Int8Array;
/**
 * Returns a copy of `issuanceTimestamp` field.
 *
 * @method issuanceTimestamp
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const issuanceTimestamp: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
export declare const createCurrentIndex: (warn?: boolean) => (buffer: Int8Array, offset?: number) => Int8Array;
export declare const currentIndex: (buffer: Int8Array, offset?: number) => Int8Array;
export declare const createLastIndex: (warn?: boolean) => (buffer: Int8Array, offset?: number) => Int8Array;
export declare const lastIndex: (buffer: Int8Array, offset?: number) => Int8Array;
export declare const createBundle: (warn?: boolean) => (buffer: Int8Array, offset?: number) => Int8Array;
export declare const bundle: (buffer: Int8Array, offset?: number) => Int8Array;
/**
 * Returns a copy of `trunkTransaction` field.
 *
 * @method trunkTransaction
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const trunkTransaction: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `branchTransaction` field.
 *
 * @method branchTransaction
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const branchTransaction: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `tag` field.
 *
 * @method tag
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const tag: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `attachmentTimestamp` field.
 *
 * @method attachmentTimestamp
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const attachmentTimestamp: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `attachmentTimestampLowerBound` field.
 *
 * @method attachmentTimestampLowerBound
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const attachmentTimestampLowerBound: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `attachmentTimestampUpperBound` field.
 *
 * @method attachmentTimestampUpperBound
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const attachmentTimestampUpperBound: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `tansactionNonce` field.
 *
 * @method transactionNonce
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const transactionNonce: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of transaction essence fields.
 *
 * @method bundle
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const transactionEssence: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * This method takes transaction trits, and returns the transaction hash.
 *
 * ## Related methods
 *
 * To validate the length of transaction trits, use the [`isMultipleOfTransactionLength()`]{@link #module_transaction.isMultipleOfTransactionLength} method.
 *
 * To get a transaction's trits from the Tangle, use the [`getTrytes()`]{@link #module_core.getTrytes} method, then convert them to trits, using the [`trytesToTrits()`]{@link #module_converter.trytesToTrits} method.
 *
 * @method transactionHash
 *
 * @summary Generates the transaction hash for a given transaction.
 *
 * @memberof module:transaction
 *
 * @param {Int8Array} buffer - Transactions in trits
 * @param {Number} [offset=0] - Offset in trits to define a transaction to hash in the `buffer` argument
 *
 * @example
 * ```js
 * let hash = Transaction.transactionHash(transactions);
 * ```
 *
 * @return {Int8Array} Transaction hash
 *
 * @throws {errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH}: Make sure that the `buffer` argument contains 8,019 trits (the length of a transaction without the transaction hash).
 * @throws {errors.ILLEGAL_TRANSACTION_OFFSET}: Make sure that the `offset` argument is a multiple of 8,019 (the length of a transaction without the transaction hash).
 */
export declare const transactionHash: (buffer: Int8Array, offset?: number) => Int8Array;
/**
 * This method takes an array of transaction trits and validates whether they form a valid transaction by checking the following:
 *
 * - Addresses in value transactions have a 0 trit at the end, which means they were generated using the Kerl hashing function
 * - The transaction would result in a valid hash, according to the given [`minWeightMagnitude`](https://docs.iota.org/docs/getting-started/0.1/network/minimum-weight-magnitude) argument
 *
 * ## Related methods
 *
 * To get a transaction's trits from the Tangle, use the [`getTrytes()`]{@link #module_core.getTrytes} method, then convert them to trits, using the [`trytesToTrits()`]{@link #module_converter.trytesToTrits} method.
 *
 * @method isTransaction
 *
 * @summary Validates the structure and contents of a given transaction.
 *
 * @memberof module:transaction
 *
 * @param {Int8Array} transaction - Transaction trits
 * @param {number} [minWeightMagnitude=0] - Minimum weight magnitude
 *
 * @example
 * ```js
 * let valid = Transaction.isTransaction(transaction);
 * ```
 *
 * @return {boolean} valid - Whether the transaction is valid.
 *
 * @throws {errors.ILLEGAL_MIN_WEIGHT_MAGNITUDE}: Make sure that the `minWeightMagnitude` argument is a number between 1 and 81.
 * @throws {errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH}: Make sure that the `transaction` argument contains 8,019 trits (the length of a transaction without the transaction hash).
 */
export declare const isTransaction: (transaction: any, minWeightMagnitude?: number) => boolean;
/**
 * This method takes an array of transaction trits, and checks its `currentIndex` field to validate whether it is the tail transaction in a bundle.
 *
 * ## Related methods
 *
 * To get a transaction's trits from the Tangle, use the [`getTrytes()`]{@link #module_core.getTrytes} method, then convert them to trits, using the [`trytesToTrits()`]{@link #module_converter.trytesToTrits} method.
 *
 * @method isTailTransaction
 *
 * @summary Checks if the given transaction is a tail transaction in a bundle.
 *
 * @memberof module:transaction
 *
 * @param {Int8Array} transaction - Transaction trits
 *
 * @example
 * ```js
 * let tail = Transaction.isTailTransaction(transaction);
 * ```
 *
 * @return {boolean} tail - Whether the transaction is a tail transaction.
 *
 * @throws {errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH}: Make sure that the `transaction` argument contains 8,019 trits (the length of a transaction without the transaction hash).
 */
export declare const isTail: (transaction: any) => transaction is Int8Array;
/**
 * This method takes an array of transaction trits, and checks its `currentIndex` field to validate whether it is the head transaction in a bundle.
 *
 * ## Related methods
 *
 * To get a transaction's trits from the Tangle, use the [`getTrytes()`]{@link #module_core.getTrytes} method, then convert them to trits, using the [`trytesToTrits()`]{@link #module_converter.trytesToTrits} method.
 *
 * @method isHeadTransaction
 *
 * @summary Checks if the given transaction is a head transaction in a bundle.
 *
 * @memberof module:transaction
 *
 * @param {Int8Array} transaction - Transaction trits
 *
 * @example
 * ```js
 * let head = Transaction.isHeadTransaction(transaction);
 * ```
 *
 * @return {boolean} head - Whether the transaction is a head transaction.
 *
 * @throws {errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH}: Make sure that the `transaction` argument contains 8,019 trits (the length of a transaction without the transaction hash).
 */
export declare const isHead: (transaction: any) => transaction is Int8Array;
/**
 * This method checks if the given transaction trits include a proof of work by validating that the its `attachmentTimestamp` field has a non-zero value.
 *
 * The `attachmentTimestamp` field is set by the `attachToTangle` endpoint. Therefore, if this field is non-zero, this method assumes that proof of work was done.
 *
 * **Note:** This method does not validate proof of work.
 *
 * ## Related methods
 *
 * To get a transaction's trits from the Tangle, use the [`getTrytes()`]{@link #module_core.getTrytes} method, then convert them to trits, using the [`trytesToTrits()`]{@link #module_converter.trytesToTrits} method.
 *
 * @method isAttachedTransaction
 *
 * @ignore
 *
 * @summary Checks if the given transaction has a non-zero value in its `attachmentTimestamp` field.
 *
 * @memberof module:transaction
 *
 * @param {Int8Array} transaction - Transaction trits
 *
 * @example
 * ```js
 * let attached = Transaction.isAttachedTransaction(transaction);
 * ```
 *
 * @return {boolean} attached - Whether the transaction has a non-zero value in its `attachmentTimestamp` field.
 *
 * @throws {errors.ILLEGAL_TRANSACTION_BUFFER_LENGTH}: Make sure that the `transaction` argument contains 8,019 trits (the length of a transaction without the transaction hash).
 */
export declare const isAttached: (transaction: Int8Array) => boolean;
